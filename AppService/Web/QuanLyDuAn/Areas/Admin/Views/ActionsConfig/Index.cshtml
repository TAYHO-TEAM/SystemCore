@{ 
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <div class="col-12">
        <div id="container" class="elevation-2"></div>
    </div>
</div>
@section script{
    <script>
        var ACTION = "/Actions";
        var ds_main = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => { 
                let deferred = $.Deferred(), params = {};
                if (values.filter && values.filter[0] == "parentId") params['FindParentId'] = values.filter[2];
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }

                $.ajax({
                    headers: header,
                    url: URL_API_ACC_READ + ACTION,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        let list = data.result.items;
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    }
                });

                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_ACC_CMD + ACTION, values),
            update: (key, values) => ajax_update(URL_API_ACC_CMD + ACTION, key, values),
            remove: (key) => ajax_delete(URL_API_ACC_CMD + ACTION, key),
        });
        $(function () {            
            loadData();
        });
        var loadData = () => $("#container").dxTreeList({
            dataSource: ds_main, height: heightScreen,
            remoteOperations: {
                filtering: false,
                sorting: true,
                grouping: false
            },
            rootValue: 0, parentIdExpr: "parentId", keyExpr: "id",
            showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
            showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
            columns: [
                {
                    dataField: "title",
                    dataType: "string", width: 250,
                    caption: "Tiêu đề / Thông tin",
                },
                {
                    dataField: "descriptions", width: ($("#container").width() > 1200?null :200),
                    dataType: "string",
                    caption: "Mô tả khác",
                },
                {
                    dataField: "icon",
                    dataType: "string", alignment: "center",
                    caption: "Icon ", width: 120,
                    cellTemplate: (c, o) => {
                        c.append($("<i>").addClass(o.value));
                    }
                },
                {
                    dataField: "url",
                    dataType: "string",
                    caption: "Đường dẫn", width: 200,
                },
                {
                    dataField: "priority",
                    dataType: "number", alignment: "center", width: 120,
                    caption: "Ưu tiên", sortOrder: "desc"
                },
                {
                    dataField: "isActive", width: 120,
                    editorType: "dxSwitch", caption: "Tình trạng",
                },
            ],
            editing: { 
                allowUpdating: PermitInAction.update,
                allowDeleting: PermitInAction.delete,
                mode: "cell", useIcons: false, confirmDelete: true, 
            },
            searchPanel: {
                highlightCaseSensitive: true,
                highlightSearchText: true,
                searchVisibleColumnsOnly: true,
                visible: true
            },
            onInitNewRow: (e) => {
                e.data.isActive = true;
                e.data.isVisible = true;
            },
            onToolbarPreparing: function (e) {
                var container = e.component;
                e.toolbarOptions.items.unshift(
                    {
                        location: "before", widget: "dxButton",
                        options: {
                            visible: PermitInAction.insert,
                            text: "Thêm", icon: "add", stylingMode: "filled", type: "default",
                            onClick: () => container.addRow()
                        }
                    },
                    {
                        location: "after", widget: "dxButton",
                        options: {
                            icon: "refresh", type: "default",
                            onClick: () => container.refresh()
                        }
                    });
            },
        });
    </script>
}