
@{
    ViewBag.Title = "Phân quyền nhóm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section style{   }

@section style{   }

<div class="row">
    <div class="col-12">
        <div id="container" class="elevation-2"></div>
    </div>
</div>

@section script{
    <script>
        var ACTION = "/GroupActionPermistion";
        var ACTION_ACTIONS = "/Actions";
        var ACTION_GROUPS = "/Groups";
        var ACTION_PERMISTIONS = "/Permistions";
        var WIDTH_CONTAINER = $("#container").width();
        $(function () {
            var customStore = new DevExpress.data.CustomStore({
                key: "id",
                load: (values) => {
                    console.log(values)
                    let deferred = $.Deferred(), params = {};
                    params = {
                        'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                        'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                    };
                    if (values.sort) {
                        params['SortCol'] = values.sort[0].selector;
                        params['SortADSC'] = values.sort[0].desc;
                    }

                $.ajax({
                    headers: header,
                    url: URL_API_ACC_READ + ACTION,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        deferred.resolve(data.result.items);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000 //10 giây
                });

                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_ACC_CMD + ACTION, values),
            update: (key, values) => ajax_update(URL_API_ACC_CMD + ACTION, key, values),
            remove: (key) => ajax_delete(URL_API_ACC_CMD + ACTION, key),
        });
        let customStore_Group = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_ACC_READ + ACTION_GROUPS,
                    success: (data) => deferred.resolve(data.result.items.filter(x => x.isActive == true && x.isVisible == true)),
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 5000
                });
                return deferred.promise();
            },
            byKey: (key) => { return key; }
        });
        let customStore_Permistions = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_ACC_READ + ACTION_PERMISTIONS,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_Action = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_ACC_READ + ACTION_ACTIONS,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });

        $(function () {
            loadData(customStore);
        });
        let customStore_Permistions = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_ACC_READ + ACTION_PERMISTIONS,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                      
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_Groups = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_ACC_READ + ACTION_GROUPS,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                      
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_Actions = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_ACC_READ + ACTION_ACTIONS,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                      
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });

        function loadData(dataSource) {
            $("#container").dxDataGrid({
                height: heightScreen,
                dataSource: dataSource,
                repaintChangesOnly: true,
                remoteOperations: {
                    filtering: false,
                    sorting: true,
                    grouping: false
                },
                rootValue: 0, parentIdExpr: "parentId", keyExpr: "id",
                showBorders: false, showColumnHeaders: true, showColumnLines: true, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: true,
                columns: [
                    //{
                    //    dataField: "soHopDong", caption: "Số hợp đồng", dataType: "string",
                    //    cellTemplate: (c, o) => $("<div>").addClass("font-weight-bold").append(o.value).appendTo(c),
                    //    validationRules: [{ type: "required" }],
                    //    editorOptions: {
                    //        placeholder: "Vui lòng nhập..."
                    //    }
                    //},
                   
                    {
                        dataField: "title",
                        dataType: "string",
                        caption: "Tiêu đề ",
                    },
                    {
                        dataField: "descriptions",
                        dataType: "string",
                        caption: "Mô tả ",
                    },
                    {
                        dataField: "icon",
                        dataType: "string",
                        caption: "Icon ",
                    },
                    {
                        dataField: "url",
                        dataType: "string",
                        caption: "url",
                    },
                    {
                        dataField: "categoryId",

                    },
                    {
                        dataField: "isActive", width: 100, alignment: "center",
                        editorType: "dxSwitch",
                    },
                    {
                        dataField: "isVisible", width: 100, alignment: "center",
                        editorType: "dxSwitch",
                    },
                    {
                        type: "buttons", caption: "Tác vụ",
                        width: 120, alignment: "center",
                        buttons: ["add", "edit", "delete"]
                    }
                ],

                editing: {
                    allowAdding: true,
                    allowUpdating: true,
                    allowDeleting: true,
                    mode: "batch"
                }
            });
        }
    </script>
}

