
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section style{

    <style>
    </style>
}

<div class="row">
    <div class="col-12">
        <div id="container" class="elevation-2"></div>
    </div>
</div>

@section script{
    <script>
        const ACTION = "/RequestRegist";
        const ACTION_PROJECT = "/Projects";
        const ACTION_HANGMUC = "/WorkItems"; 
        const ACTION_GIAIDOAN = "/WorkItems";
        const ACTION_LOAITHAU = "/ResponseRegist";
        const ACTION_NGANSACH = "/ResponseRegistReply";
        var PROJECTID = isNullOrEmpty(localStorage.getItem("projectIdCurrent")) ? parseInt(localStorage.getItem("projectIdCurrent")) : 0;

        var WIDTH_CONTAINER = $("#container").width();

        let customStore = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred(), params = {};

                params = {
                    'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                    'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                };
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                params = { 'findId': 'projectId,' + PROJECTID}
                $.ajax({
                    headers: header,
                    url: URL_API_PM_READ + ACTION,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        let list = data.result.items;
                        deferred.resolve(
                            list,
                            {
                                totalCount: list.length,
                            }
                        );
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 5000
                });
                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION, key),
        });

        let dataSource_NganSachDetail = (id) => new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred(), params = {};
                params = {
                    'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                    'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                };
                params = {
                    'FindParentId': 'NganSachId,'+id.toString()
                };
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header,
                    url: URL_API_PM_READ + ACTION_NGANSACH,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        let list = data.result.items;
                        deferred.resolve(
                            list,
                            {
                                totalCount: list.length,
                            }
                        );
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 5000
                });
                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_NGANSACH, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_NGANSACH, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_NGANSACH, key),
        });

        let customStore_Projects = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_PROJECT,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        if (PROJECTID == 0) {
                            localStorage.setItem("projectIdCurrent", parseInt(list[0].id));
                            PROJECTID = parseInt(list[0].id)
                        }
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_HangMuc = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_HANGMUC,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Hạng mục'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_GiaiDoan = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_GIAIDOAN,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai Đoạn'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_LoaiThau = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_LOAITHAU,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Loại thầu'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });

        $(function () {
            loadData(customStore);
        });

        let loadData = (dataSource) => {
            $("#container").dxDataGrid({
                height: heightScreen,
                dataSource: dataSource,
                remoteOperations: {
                    paging: true,
                    sorting: true,
                },
                repaintChangesOnly: true,
                showBorders: false, showColumnHeaders: true, showColumnLines: true, hoverStateEnabled: false,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                paging: {
                    enabled: true,
                    pageSize: 20
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 40],
                    showInfo: true,
                },
                columns: [
                    {
                        dataField: "workItemId", caption: "Hạng mục",
                        dataType: "string", width: (WIDTH_CONTAINER < 900) ? 200 : "100%",
                        lookup: {
                            dataSource: customStore_HangMuc,
                            valueExpr: "id", displayExpr: "tenHangMuc",
                        },
                        editorType: "dxLookup",
                        editorOptions: {
                            dataSource: customStore_HangMuc,
                            valueExpr: "id", displayExpr: "tenHangMuc",
                            placeholder: "Vui lòng chọn...",
                            searchEnabled: true, showClearButton: true,
                            itemTemplate: function (data) {
                                return $("<div>").append($("<b>").append(data.kyHieu).addClass("mr-1"), $("<em>").append(data.tenHangMuc));
                            },
                        },
                        validationRules: [{ type: "required" }],
                        groupIndex:0
                    },//hangMucId
                    {
                        dataField: "loaiThauId", caption: "Loại Thầu",
                        dataType: "string", width: (WIDTH_CONTAINER < 900) ? 200 : "100%",
                        lookup: {
                            dataSource: customStore_LoaiThau,
                            valueExpr: "id", displayExpr: "tenGoiThau",
                        },
                        editorType: "dxLookup",
                        editorOptions: {
                            dataSource: customStore_LoaiThau,
                            valueExpr: "id", displayExpr: "tenGoiThau",
                            placeholder: "Vui lòng chọn...",
                            searchEnabled: true, showClearButton: true,
                            itemTemplate: function (data) {
                                return $("<div>").append($("<b>").append(data.tenGoiThau).addClass("mr-1"), $("<em>").append(data.dienGiai));
                            },
                        },
                        validationRules: [{ type: "required" }],
                        groupIndex: 1
                    },//loaiThauId
                    //{
                    //    dataField: "giaiDoanId", caption: "Giai đoạn",
                    //    dataType: "string", width: (WIDTH_CONTAINER < 900) ? 200 : "100%",
                    //    lookup: {
                    //        dataSource: customStore_GiaiDoan,
                    //        valueExpr: "id", displayExpr: "tenGiaiDoan",
                    //    },
                    //    editorType: "dxLookup",
                    //    editorOptions: {
                    //        dataSource: customStore_GiaiDoan,
                    //        valueExpr: "id", displayExpr: "tenGiaiDoan",
                    //        placeholder: "Vui lòng chọn...",
                    //        searchEnabled: true, showClearButton: true,
                    //        itemTemplate: function (data) {
                    //            return $("<div>").append($("<b>").append(data.tenGiaiDoan).addClass("mr-1"), $("<em>").append(data.dienGiai));
                    //        },
                    //    },
                    //    validationRules: [{ type: "required" }]
                    //},//giaiDoanId
                    {
                        dataField: "dienGiai", caption: "Diễn giải", dataType: "string",
                        alignment: "left", width: 250,
                        cellTemplate: (c, o) => $("<div />").append((o.value == null || o.value.length == 0) ? "--" : o.value).appendTo(c)
                    },//dienGiai
                    {
                        dataField: "giaTri", caption: "Giá trị", dataType: "number",
                        alignment: "center", width: 200,
                        format: { type: "currency", currency: "VND" },
                        editorType: "dxNumberBox",
                        editorOptions: {
                            showClearButton: true,
                            format: "#,##0 đ",
                            min: 1000000, step: 1000000, showSpinButtons: true,
                        },
                        validationRules: [{ type: "required" }],
                    },//giaTri
                    {
                        dataField: "isLock", width: 120, caption: "Khóa xổ",
                        editorType: "dxSwitch", dataType: "boolean",
                        cellTemplate: (c, o) => {
                            if (o.value == true) $("<span />").addClass("badge badge-danger p-1").append($("<i/>").addClass("ti-lock mr-1"), "ĐÃ KHÓA").appendTo(c);
                            else $("<span />").addClass("badge badge-info p-1").append($("<i/>").addClass("ti-unlock mr-1"), "CHƯA KHÓA").appendTo(c);
                        }
                    },//isLock
                ],
                editing: {
                    allowAdding: true,
                    allowUpdating: true,
                    allowDeleting: true,
                    useIcons: false,
                    confirmDelete: true,
                    mode: "popup",
                    popup: {
                        width: 600, height: "auto",
                        showTitle: true, title: "THEO DÕI NGÂN SÁCH",
                        closeOnOutsideClick: false,
                        showCloseButton: true,
                    },
                    form: {
                        labelLocation: "left", itemType: "group", colCount: 12,
                        items: [
                            {
                                colSpan: 12,
                                dataField: "hangMucId",
                                label: { text: "Hạng mục" },
                            },
                            {
                                colSpan: 12,
                                dataField: "loaiThauId",
                                label: { text: "Loại thầu" },
                            },
                            {
                                colSpan: 12,
                                dataField: "giaiDoanId",
                                label: { text: "Giai đoạn" },
                            },
                            {
                                colSpan: 12,
                                dataField: "giaTri",
                                label: { text: "Giá trị" },
                            },
                            {
                                colSpan: 12,
                                dataField: "dienGiai",
                                label: { text: "Diễn giải" },
                            },
                            {
                                colSpan: 12,
                                dataField: "isLock",
                                label: { text: "Khóa xổ?" },
                            }
                        ]
                    }
                },
                //selection: {
                //    mode: "single"
                //},
                //onSelectionChanged: function (e) {
                //    e.component.collapseAll(-1);
                //    e.component.expandRow(e.currentSelectedRowKeys[0]);
                //},
                //onCellPrepared: function (cellElement, cellInfo) {
                //    if (cellElement.rowType != "data" || !cellElement.isEditing)
                //        return;
                //    if (cellElement.column.dataField === 'giaTri' && !cellElement.row.inserted)
                //        cellElement.element.find('input').prop('readonly', true);
                //},

                //onEditorPreparing: function (e) {
                //    if (e.parentType === "dataRow" && e.dataField !== "giaTri") {
                //        return;
                //    }
                //    if (!e.row.isNewRow)
                //        e.editorOptions.disabled = true;
                //},
                masterDetail: {
                    enabled: true,
                    template: function (container, options) {
                        console.log(options);
                        $("<div>").addClass("elevation-3").dxDataGrid({
                            dataSource: dataSource_NganSachDetail(options.data.id),
                            remoteOperations: {
                                paging: true,
                                sorting: true,
                            },
                            repaintChangesOnly: true,
                            showBorders: true, showColumnHeaders: true, showColumnLines: true, hoverStateEnabled: true,
                            showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: true,
                            paging: {
                                enabled: true,
                                pageSize: 20
                            },
                            pager: {
                                showPageSizeSelector: true,
                                allowedPageSizes: [10, 20, 40],
                                showInfo: true,
                            },
                            columns: [
                                {
                                    caption: "STT", width: 80, alignment:"center",
                                    cellTemplate: (c, o) => $("<div />").append(o.rowIndex + 1).appendTo(c)
                                },
                                {
                                    dataField: "congViec", caption: "Công việc / Hoạt động", alignment: "left",
                                    validationRules: [{ type: "required" }],
                                },
                                {
                                    dataField: "dienGiai", caption: "Diễn giải", dataType: "string",
                                    alignment: "left", width: 250,
                                    cellTemplate: (c, o) => $("<div />").append((o.value == null || o.value.length == 0) ? "--" : o.value).appendTo(c)
                                },
                                {
                                    dataField: "giaTri", caption: "Giá trị", dataType: "number",
                                    alignment: "center", width: 200,
                                    format: { type: "currency", currency: "VND" },
                                    editorType: "dxNumberBox",
                                    editorOptions: {
                                        format: "#,##0 đ",
                                        min: 1000000,
                                        step: 1000000,
                                        showSpinButtons: true,
                                        showClearButton: true,
                                    },
                                    validationRules: [{ type: "required" }],
                                },
                            ],
                            editing: {
                                allowAdding: true,
                                allowUpdating: true,
                                allowDeleting: true,
                                useIcons: false,
                                confirmDelete: true,
                                mode: "popup",
                                popup: {
                                    width: 600, height: "auto",
                                    showTitle: true, title:"THEO DÕI CHI TIẾT NGÂN SÁCH",
                                    closeOnOutsideClick: false,
                                    showCloseButton: true,
                                },
                                form: {
                                    labelLocation: "left", itemType: "group", colCount: 12,
                                    items: [
                                        {
                                            colSpan: 12,
                                            dataField: "congViec",
                                            label: { text: "Công việc" },
                                        },
                                        {
                                            colSpan: 12,
                                            dataField: "giaTri",
                                            label: { text: "Giá trị" },
                                        },
                                        {
                                            colSpan: 12,
                                            dataField: "dienGiai",
                                            label: { text: "Diễn giải" },
                                        }
                                    ]
                                }
                            },
                            onToolbarPreparing: (e) => {
                                var container = e.component;
                                e.toolbarOptions.items.unshift(
                                    {
                                        location: "after", widget: "dxButton",
                                        options: {
                                            icon: "refresh",
                                            onClick: () => container.refresh()
                                        }
                                    })
                            },
                            onInitNewRow: (e) => {
                                e.data.isActive = true;
                                e.data.isVisible = true;
                                e.data.NganSachId = options.data.id;
                                e.data.isLock = false;
                            },
                            summary: {
                                totalItems: [{
                                    column: "giaTri",
                                    summaryType: "sum",
                                    valueFormat: { type: "currency", currency: "VND" },
                                }]
                            },
                            onRowInserted: () => options.component.refresh(),
                            onRowUpdated: () => options.component.refresh(),
                            onRowRemoved: () => options.component.refresh()
                        }).appendTo(container);
                    }
                },
                onToolbarPreparing: (e) =>  {
                    var container = e.component;
                    e.toolbarOptions.items.unshift(
                        {
                            location: "before", widget: "dxSelectBox",
                            options: {
                                dataSource: customStore_Projects,
                                valueExpr: "id", displayExpr: "title",
                                searchEnabled: true,
                                searchMode: "contains",
                                width: "100%",
                                showClearButton: false,
                                value: PROJECTID,
                                onValueChanged: function (data) {
                                    PROJECTID = data.value;
                                    localStorage.setItem('projectIdCurrent', PROJECTID);
                                    loadData(customStore);
                                },
                            },
                        },
                        {
                            location: "after", widget: "dxButton",
                            options: {
                                icon: "refresh",
                                onClick: () => container.refresh()
                            }
                        })
                },
                onInitNewRow: (e) => {
                    e.data.isActive = true;
                    e.data.isVisible = true;
                    e.data.ProjectId = PROJECTID;
                    e.data.isLock = false;
                },
                summary: {
                    totalItems: [{
                        column: "giaTri",
                        summaryType: "sum",
                        valueFormat: { type: "currency", currency: "VND" },
                    }]
                }
            });
        }
    </script>
}
