@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section style{

    <style>
    </style>
}
<div id="popup-main-sub"></div>
<div id="popup-main-upload"></div>
<div class="row">
    <div class="col-12">
        <div id="container" class="elevation-2"></div>
    </div>
</div>
<form id="form" method="post" action="" enctype="multipart/form-data">
    <h3>Profile Settings</h3>
    <div class="dx-fieldset">
        <div class="dx-field">
            <div class="dx-field-label">First Name:</div>
            <div class="dx-field-value" id="first-name"></div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Last Name:</div>
            <div class="dx-field-value" id="last-name"></div>
        </div>
    </div>
    <div id="fileuploader-container">
        <div id="file-uploader"></div>
    </div>
    <div id="button"></div>
</form>


@section script{
    <script>
        const ACTION = "/RequestRegist/GetByAccountID";
        const ACTION_DETAIL = "/RequestRegist/GetDetail";
        const ACTION_RESPONSEBYACC = "/ResponseRegist/getByAccount";
        const ACTION_RESPONSE = "/ResponseRegist";
        const ACTION_FILEGET = "/FilesAttachment/getBy";
        const ACTION_CMD = "/RequestRegist";
        const ACTION_PROJECT = "/Projects";
        const ACTION_HANGMUC = "/WorkItems";
        const ACTION_DOCUMENTTYPE = "/DocumentType";
        const ACTION_REPLY = "/ResponseRegistReply";
        var PROJECTID = isNullOrEmpty(localStorage.getItem("projectIdCurrent")) ? parseInt(localStorage.getItem("projectIdCurrent")) : 0;

        var WIDTH_CONTAINER = $("#container").width();

        let customStore = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred(), params = {};
                if (values.filter && values.filter[0] == "parentId") params['FindParentId'] = values.filter[2];
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }

                $.ajax({
                    headers: header,
                    url: URL_API_PM_READ + ACTION,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        let list = data.result.items;
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000//10 giây
                });

                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_CMD, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_CMD, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_CMD, key),
        });
        let customStore_Projects = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_PROJECT,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        if (PROJECTID == 0) {
                            localStorage.setItem("projectIdCurrent", parseInt(list[0].id));
                            PROJECTID = parseInt(list[0].id)
                        }
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_HangMuc = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_ACC_READ + ACTION_HANGMUC,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Hạng mục'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_DocumetnType = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_DOCUMENTTYPE,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai Đoạn'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_Detail = (id) => new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                var deferred = $.Deferred();
                var params = {
                    'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                    'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                    'FindId': id
                }
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_DETAIL,
                    success: function (data) {
                        var list = data.result.items;
                        deferred.resolve(
                            list,
                            {
                                totalCount: list.length,
                            }
                        );
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Hạng mục'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
            //insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_CONGVIEC, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_RESPONSE, key, values),
            //remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_CONGVIEC, key),
        });
        let customStore_Response = (id) => new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred();
                var params = {
                    'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                    'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                    'FindId': id
                }
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header,
                    url: URL_API_PM_READ + ACTION_RESPONSEBYACC,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        var list = data.result.items;
                        deferred.resolve(
                            list,
                            {
                                totalCount: list.length,
                            }
                        );
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000//10 giây
                });

                return deferred.promise();
            },
            //insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_CMD, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_RESPONSE, key, values),
            //remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_CMD, key),
        });
        let customStore_File = (table, id) => new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                var deferred = $.Deferred();
                var params = {
                    'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                    'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                    'FindParentId': 'RequestRegist',
                    'FindId': id
                }
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_FILEGET,
                    success: function (data) {
                        var list = data.result.items;
                        deferred.resolve(
                            list,
                            {
                                totalCount: list.length,
                            }
                        );
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Hạng mục'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
            //insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_CONGVIEC, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_RESPONSE, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_CONGVIEC, key),
        });
        $(function () {
            loadData(customStore);
        });

        let loadData = (dataSource) => {
            $("#container").dxTreeList({
                height: heightScreen,
                dataSource: dataSource,
                repaintChangesOnly: true,
                remoteOperations: {
                    filtering: true,
                    sorting: true,
                    grouping: false
                },
                scrolling: { mode: "standard" },
                rootValue: 0, parentIdExpr: "parentId", keyExpr: "id",
                showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                columns: [
                    {
                        dataField: "code",
                        caption: "Mã",
                        dataType: "string",
                        editorOptions: {
                            readOnly: true,
                            placeholder: "auto gen",
                        }
                    },//tiêu đề
                    {
                        dataField: "title",
                        caption: "Tiêu đề",
                        dataType: "string",

                    },//tiêu đề
                    {
                        dataField: "workItemId", caption: "Hạng mục",
                        lookup: {
                            dataSource: customStore_HangMuc,
                            valueExpr: "id", displayExpr: "title",
                        },
                        editorType: "dxLookup",
                        editorOptions: {
                            dataSource: customStore_HangMuc,
                            valueExpr: "id", displayExpr: "title",
                            placeholder: "Vui lòng chọn...",
                            searchEnabled: true, showClearButton: true,
                            itemTemplate: function (data) {
                                return $("<div>").append($("<b>").append(data.code).addClass("mr-1"), $("<em>").append(data.title));
                            },
                        },
                        validationRules: [{ type: "required" }],
                    },//hangMucId
                    {
                        dataField: "documentTypeId", caption: "Loại tài liệu",
                        lookup: {
                            dataSource: customStore_DocumetnType,
                            valueExpr: "id",
                            displayExpr: "title",
                        },
                        editorType: "dxLookup",
                        editorOptions: {
                            dataSource: customStore_DocumetnType,
                            valueExpr: "id", displayExpr: "title",
                            placeholder: "Vui lòng chọn...",
                            searchEnabled: true, showClearButton: true,
                            itemTemplate: function (data) {
                                return $("<div>").append($("<b>").append(data.code).addClass("mr-1"), $("<em>").append(data.title));
                            },
                        },
                        validationRules: [{ type: "required" }],
                    },//loại tài liệu Id
                    {
                        dataField: "rev",
                        caption: "REV",
                        dataType: "string",
                        editorOptions: {
                            readOnly: true,
                            placeholder: "auto gen",
                        },
                    },//rev
                    {
                        dataField: "AccountName",
                        caption: "Người đệ trình",
                        dataType: "string",
                        editorOptions: {
                            readOnly: true,
                            placeholder: "auto gen",
                        },
                    },//account
                    {
                        dataField: "createDate",
                        caption: "Ngày đệ trình",
                        dataType: "date",
                        format: "dd/MM/yyyy",
                    },//date
                    {
                        dataField: "descriptions",
                        caption: "Mô tả",
                        dataType: "string",
                        alignment: "left",
                    },// descriptions
                    {
                        dataField: "note",
                        caption: "Ghi Chú",
                        dataType: "string",
                        alignment: "left",
                    },// note
                    {
                        dataField: "noAttachment",
                        caption: "File đính kèm",
                        dataType: "string",
                        alignment: "left",
                        cellTemplate: (container, options) => {
                            container.append($('<a>').attr("href", "javaScript:void(0)").text(options.value = null ? "đang có " + options.value + "fiels" : "chưa có file nào"));
                        },
                    },
                    //{
                    //    type: "buttons",
                    //    buttons: [{
                    //        text: function (e) {
                    //            console.log("a");
                    //            console.log(e);
                    //            return "a";
                    //        },
                    //        visible: function (e) {
                    //            console.log(e);
                    //            return e.row.data.update && !e.row.data.isApprove;
                    //        },
                    //        onClick: function (e) {
                    //            loadUpload("",e.row.data);
                    //        }
                    //    }]
                    //}, ///file Acttachment
                    //{
                    //    type: "buttons",
                    //    buttons: [{
                    //        template: function (e) {
                    //            var no = '1';
                    //            var link = $("<a>").text("1")
                    //                .attr("href", "#");
                    //            link.on("click", function () {
                    //                console.log(e);

                    //                console.log("My command was clicked");
                    //            });
                    //            return link;
                    //        }
                    //    }]
                    //},
                    {
                        type: "buttons",
                        width: 110,
                        buttons: ["edit", "delete", {
                            icon: "add",
                            visible: function (e) {

                                return e.row.data.parentId === 0 && e.row.data.insert;
                            },
                            onClick: function (e) {

                                var obj = e.row.data;
                                obj['parentId'] = e.row.data.id;
                                var d = $.Deferred();
                                customStore.insert(obj).then(() => {
                                    e.component.refresh().then(d.resolve, d.reject);
                                }, d.reject);
                                e.event.preventDefault();
                            }
                        }]
                    },
                ],
                onCellClick: function (e) {
                    if (e.column.dataField === "noAttachment") {
                        loadUpload("", e.row.data);
                    }
                },
                //rowDragging: {
                //    allowDropInsideItem: true,
                //    allowReordering: false,
                //    showDragIcons: true,
                //    onDragEnd: function (e) {
                //        var id = e.itemData.id;
                //        var parentId = e.component.getVisibleRows()[e.toIndex].node.key;
                //        console.log(ajax_update(URL_API_PM_CMD + ACTION_CMD, id, { parentId: (id != parentId) ? parentId : 0 }));
                //        e.component.refresh();
                //    },
                //},
                paging: {
                    enabled: true,
                    pageSize: 20
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 40],
                    showInfo: true,
                },
                searchPanel: {
                    highlightCaseSensitive: true,
                    highlightSearchText: true,
                    searchVisibleColumnsOnly: true,
                    visible: WIDTH_CONTAINER > 350
                },
                editing: {
                    allowUpdating: false,
                    //allowUpdating: (e) => {
                    //    return e.row.data.parentId == 0 && e.row.data.update;
                    //},
                    allowDeleting: (e) => {
                        return e.row.data.parentId == 0 && e.row.data.delate;
                    },
                    allowAdding: (e) => {
                        return e.row.data.parentId == 0;
                    },
                    mode: "popup",
                    useIcons: true,
                    confirmDelete: true,
                },
                onToolbarPreparing: function (e) {
                    var container = e.component;
                    e.toolbarOptions.items.unshift(
                        {
                            location: "before", widget: "dxSelectBox",
                            options: {
                                dataSource: customStore_Projects,
                                valueExpr: "id", displayExpr: "title",
                                searchEnabled: true,
                                searchMode: "contains",
                                width: "100%",
                                showClearButton: false,
                                value: PROJECTID,
                                onValueChanged: function (data) {
                                    PROJECTID = data.value;
                                    localStorage.setItem('projectIdCurrent', PROJECTID);
                                    loadData(customStore);
                                },
                            },
                        },
                        {
                            location: "after", widget: "dxButton",
                            options: {
                                icon: "refresh", tylingMode: "filled", type: "default",
                                onClick: () => container.refresh()
                            }
                        })
                },
                onInitNewRow: (e) => {
                    e.data.isActive = true;
                    e.data.isVisible = true;
                    e.data.ProjectId = PROJECTID;
                },
                onCellPrepared: (e) => {
                    if (e.rowType == "data" && e.columnIndex === 0) {
                        e.cellElement.find('.dx-treelist-empty-space').toggleClass("dx-treelist-collapsed", e.data.parentId === 0);
                    }
                },
                //onEditorPreparing: function (e) {
                //    if (e.parentType === "dataRow" && e.dataField !== "title") {
                //        return;
                //    }

                //},

                onContextMenuPreparing: (e) => {
                    if (!e.items) e.items = [];
                    if (e.target == "content" && e.rowIndex >= 0) {
                        e.items.push({
                            icon: "far fa-eye",
                            text: "Xem chi tiết",
                            onItemClick: () => loadDetail(e.row.data)
                        });

                    }
                }
            });
        }
        /// Load Popup
        let loadDetail = (item) => $("#popup-main").dxPopup({
            width: "98%", height: "95%",
            fullScreen: false,
            dragEnabled: true,
            resizeEnabled: true,
            showTitle: true, title: item.title.toUpperCase(),
            showCloseButton: true, closeOnOutsideClick: true,
            visible: true,
            contentTemplate: (c) => {
                var scrollView = $("<div id='scrollView'></div>");
                var content = $("<div/>");
                content.dxDataGrid({
                    elementAttr: {
                        id: "dxDataGrid_detail"
                    },
                    dataSource: customStore_Detail(item.id),
                    remoteOperations: {
                        paging: true,
                        sorting: true,
                    },
                    repaintChangesOnly: true,
                    showBorders: true, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                    showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: true,
                    paging: {
                        enabled: true,
                        pageSize: 20
                    },
                    pager: {
                        showPageSizeSelector: true,
                        allowedPageSizes: [10, 20, 40],
                        showInfo: true,
                    },
                    columns: [
                        {
                            caption: "STT", alignment: "center",
                            cellTemplate: (c, o) => $("<div/>").append(o.rowIndex + 1).appendTo(c),
                        },//STT
                        {
                            dataField: "code",
                            caption: "Mã",
                            dataType: "string",
                            alignment: "left",
                            dataType: "string",
                            //editorType: "dxTextBox",
                            //editorOptions: {
                            //    placeholder: "Vui lòng nhập...",
                            //    showClearButton: true,
                            //},
                            //validationRules: [{ type: "required" }]
                        },//tenCongViec
                        {
                            dataField: "rev",
                            caption: "REV",
                            dataType: "string",
                        },//rev
                        {
                            dataField: "accountName",
                            caption: "Người đệ trình",
                            dataType: "string",

                        },//account
                        {
                            dataField: "descriptions", caption: "Mô tả",
                            dataType: "string", alignment: "left",
                        },
                        {
                            dataField: "note", caption: "Nghi chú",
                            dataType: "string", alignment: "left",
                        },
                        {
                            dataField: "noAttachment",
                            caption: "File đính kèm",
                            dataType: "string",
                            alignment: "left",

                        },///file đính kèm
                    ],
                    editing: {
                        mode: "batch",
                        allowAdding: false,
                        allowDeleting: true,
                        allowUpdating: true,
                    },
                    //onInitNewRow: (e) => {
                    //    e.data.isActive = true;
                    //    e.data.isVisible = true;
                    //    e.data.nhomCongViecId = item.id;
                    //    e.data.giaiDoanId = 1;
                    //    e.data.donGia = 1000000;
                    //    e.data.khoiLuong = 1;
                    //    e.data.isLock = false;
                    //},
                    onToolbarPreparing: (e) => {
                        var container = e.component;
                        e.toolbarOptions.items.unshift(
                            {
                                location: "after", widget: "dxButton",
                                options: {
                                    icon: "refresh", type: "default",
                                    onClick: () => container.refresh()
                                }
                            })
                    },
                    masterDetail: {
                        enabled: true,
                        template: function (container, options) {
                            console.log(options);
                            var data = options.data;
                            $("<div>")
                                .dxDataGrid({
                                    showBorders: true,
                                    showColumnHeaders: true,
                                    showColumnLines: false,
                                    hoverStateEnabled: true,
                                    showRowLines: true,
                                    columnAutoWidth: true,
                                    wordWrapEnabled: true,
                                    rowAlternationEnabled: true,
                                    dataSource: data.responseRegistDTOs,
                                    columnAutoWidth: true,
                                    columns: [{
                                        caption: "STT", alignment: "center",
                                        cellTemplate: (c, o) => $("<div />").append(o.rowIndex + 1).appendTo(c),
                                    },//STT
                                    {
                                        dataField: "title", caption: "Tiêu đề",
                                        dataType: "string", alignment: "left",
                                        //editorType: "dxTextBox",
                                        //editorOptions: {
                                        //    placeholder: "Vui lòng nhập...",
                                        //    showClearButton: true,
                                        //},
                                        //validationRules: [{ type: "required" }]
                                    },//tenCo
                                    {
                                        dataField: "typeOfResult",
                                        caption: "Kết quả đánh giá",
                                        dataType: "number",
                                        alignment: "left",
                                        cellTemplate: (container, options) => {
                                            container.append(options.value == 1 ? 'Đồng ý' : options.value == 2 ? 'Đồng ý kèm ý kiến' : options.value == 3 ? 'Từ chối' : options.value == 4 ? 'Trả lại' : '')
                                        },
                                        //editorType: "dxTextBox",
                                        //editorOptions: {
                                        //    placeholder: "Vui lòng nhập...",
                                        //    showClearButton: true,
                                        //},
                                        //validationRules: [{ type: "required" }]
                                    },//tenCongViecnoAttachmentisApprove
                                    {
                                        dataField: "accountName", caption: "Ngươi đánh giá",
                                        dataType: "string", alignment: "left",
                                    },
                                    {
                                        dataField: "description",
                                        caption: "Nhận xét",
                                        dataType: "string",
                                        alignment: "left",
                                    },
                                    {
                                        dataField: "noAttachment", caption: "File đính kèm",
                                        dataType: "string", alignment: "left",
                                    },
                                    {
                                        type: "buttons",
                                        buttons: [{
                                            icon: "add",
                                            visible: function (e) {
                                                console.log(e);
                                                return e.row.data.update && !e.row.data.isApprove;
                                            },
                                            onClick: function (e) {
                                                loadRate(e.row.data);
                                            }
                                        }]
                                    },
                                    ],
                                }).appendTo(container);
                        }
                    }

                });
                scrollView.append(content);
                scrollView.dxScrollView({
                    width: '100%',
                    height: '100%'
                });
                c.append(scrollView);
                return c;
            }
        });
        /// Load Popup Rate
        let loadRate = (item) => $("#popup-main-sub").dxPopup({
            width: "80%", height: "60%",
            fullScreen: false,
            dragEnabled: true,
            resizeEnabled: true,
            showTitle: true,
            title: item.title && item.title.toUpperCase(),
            showCloseButton: true, closeOnOutsideClick: true,
            visible: true,
            contentTemplate: (c) => {
                var scrollView = $("<div id='scrollView'></div>");
                var content = $("<div/>");
                var content_Upload = $("<div/>");
                content.dxDataGrid({
                    dataSource: customStore_Response(item.id),
                    remoteOperations: {
                        paging: true,
                        sorting: true,
                    },
                    repaintChangesOnly: true,
                    showBorders: true,
                    showColumnHeaders: true,
                    showColumnLines: false,
                    hoverStateEnabled: true,
                    showRowLines: true,
                    columnAutoWidth: true,
                    wordWrapEnabled: true,
                    rowAlternationEnabled: true,
                    paging: {
                        enabled: true,
                        pageSize: 20
                    },
                    pager: {
                        showPageSizeSelector: true,
                        allowedPageSizes: [10, 20, 40],
                        showInfo: true,

                    },
                    columns: [
                        {
                            caption: "STT", alignment: "center",
                            cellTemplate: (c, o) => $("<div/>").append(o.rowIndex + 1).appendTo(c),
                        },//STT
                        {
                            dataField: "title",
                            caption: "Tiêu đề",
                            dataType: "string",
                            alignment: "left",
                            //editorType: "dxTextBox",
                            //editorOptions: {
                            //    placeholder: "Vui lòng nhập...",
                            //    showClearButton: true,
                            //},
                            //validationRules: [{ type: "required" }]
                        },//Tiêu đề
                        {
                            dataField: "description",
                            caption: "Nhận xét",
                            dataType: "string",
                        },//rev
                        {
                            dataField: "typeOfResult",
                            caption: "Kết quả",
                            dataType: "number",
                            alignment: "left",
                            cellTemplate: (container, options) => {
                                container.append(options.value == 1 ? 'Đồng ý' : options.value == 2 ? 'Đồng ý kèm ý kiến' : options.value == 3 ? 'Từ chối' : options.value == 4 ? 'Trả lại' : '')
                            },
                            editorOptions: {
                                dataSource: typeApprove,
                                displayExpr: "text",
                                valueExpr: "value",
                            },
                            editorType: "dxSelectBox",
                            validationRules: [{ type: "required" }],
                        },//account
                        //{
                        //    dataField: "descriptions", caption: "Mô tả",
                        //    dataType: "string", alignment: "left",
                        //},
                        //{
                        //    dataField: "note", caption: "Nghi chú",
                        //    dataType: "string", alignment: "left",
                        //},
                        //{
                        //    dataField: "noAttachment",
                        //    caption: "File đính kèm",
                        //    dataType: "string",
                        //    alignment: "left",

                        //},///file đính kèm
                    ],
                    editing: {
                        mode: "batch",
                        allowAdding: false,
                        allowDeleting: true,
                        allowUpdating: true,
                    },
                    //onInitNewRow: (e) => {
                    //    e.data.isActive = true;
                    //    e.data.isVisible = true;
                    //    e.data.nhomCongViecId = item.id;
                    //    e.data.giaiDoanId = 1;
                    //    e.data.donGia = 1000000;
                    //    e.data.khoiLuong = 1;
                    //    e.data.isLock = false;
                    //},
                    onToolbarPreparing: (e) => {
                        var container = e.component;
                        e.toolbarOptions.items.unshift(
                            {
                                location: "after", widget: "dxButton",
                                options: {
                                    icon: "refresh", type: "default",
                                    onClick: () => container.refresh()
                                }
                            })
                    },
                });
                content_Upload.dxFileUploader({
                    selectButtonText: "Select photo",
                    labelText: "",
                    accept: "image/*",
                    uploadMode: "useForm"
                });
                //content_Upload_submit.dxButton({
                //    text: "Update profile",
                //    type: "success",
                //    onClick: function () {
                //        DevExpress.ui.dialog.alert("Uncomment the line to enable sending a form to the server.", "Click Handler");
                //        //$("#form").submit();
                //    }
                //});
                scrollView.append(content, content_Upload);
                scrollView.dxScrollView({
                    width: '100%',
                    height: '100%'
                });
                c.append(scrollView);
                return c;
            },
            onHidden: (c) => {
                $("#dxDataGrid_detail").dxDataGrid('instance').refresh();
            }
        });
        ///// Load Popup Upload file
        let loadUpload = (table, item) => $("#popup-main-upload").dxPopup({
            width: "70%", height: "50%",
            fullScreen: false,
            dragEnabled: true,
            resizeEnabled: true,
            showTitle: true,
            title: item.title && item.title.toUpperCase(),
            showCloseButton: true, closeOnOutsideClick: true,
            visible: true,
            contentTemplate: (c) => {
                var scrollView = $("<div id='scrollView'></div>");
                var content = $("<div/>");
                var content_Upload = $("<form />").attr("method", "POST").attr("enctype","multipart/form-data");
                var content_Upload_submit = $("<div/>");
                content.dxDataGrid({
                    dataSource: customStore_File(item.id),
                    remoteOperations: {
                        paging: true,
                        sorting: true,
                    },
                    repaintChangesOnly: true,
                    showBorders: true,
                    showColumnHeaders: true,
                    showColumnLines: false,
                    hoverStateEnabled: true,
                    showRowLines: true,
                    columnAutoWidth: true,
                    wordWrapEnabled: true,
                    rowAlternationEnabled: true,
                    paging: {
                        enabled: true,
                        pageSize: 20
                    },
                    pager: {
                        showPageSizeSelector: true,
                        allowedPageSizes: [10, 20, 40],
                        showInfo: true,

                    },
                    columns: [
                        {
                            caption: "STT", alignment: "center",
                            cellTemplate: (c, o) => $("<div/>").append(o.rowIndex + 1).appendTo(c),
                        },
                        {
                            dataField: "fileName",
                            caption: "Tên file",
                            dataType: "string",
                        },//rev
                        {
                            dataField: "url",
                            caption: "Đường dẫn",
                            dataType: "string",
                        }, //url
                    ],
                    editing: {
                        mode: "batch",
                        allowAdding: false,
                        allowDeleting: true,
                        allowUpdating: true,
                    },
                    //onInitNewRow: (e) => {
                    //    e.data.isActive = true;
                    //    e.data.isVisible = true;
                    //    e.data.nhomCongViecId = item.id;
                    //    e.data.giaiDoanId = 1;
                    //    e.data.donGia = 1000000;
                    //    e.data.khoiLuong = 1;
                    //    e.data.isLock = false;
                    //},
                    onToolbarPreparing: (e) => {
                        var container = e.component;
                        e.toolbarOptions.items.unshift(
                            {
                                location: "after", widget: "dxButton",
                                options: {
                                    icon: "refresh", type: "default",
                                    onClick: () => container.refresh()
                                }
                            })
                    },
                });

                content_Upload.append(
                    $("<div>").dxFileUploader({
                        uploadCustomData: {
                            ownerById: 1
                        },
                        //multiple: true,
                        uploadMethod: "POST",
                        uploadMode: "useForm",
                        uploadUrl: "/", 
                     
                    })
                );
                //new DevExpress.ui.dxFileUploader(content_Upload, {
                //    "uploadMethod": "POST",
                //    "uploadCustomData": {
                //        "ownerById": 1
                //    },
                //    "uploadMode": "useButtons",
                //    "uploadUrl": "http://192.168.1.26:8081/api/cmd/v1/FilesAttachment/UploadFile"
                //});


                //content_Upload.dxFileUploader({

                //    multiple: true,
                //    uploadMethod: "POST",
                //    uploadMode: "useButtons",
                //    uploadUrl: "http://192.168.1.26:8081/api/cmd/v1/FilesAttachment/UploadFile",
                //    //allowedFileExtensions: [".jpg", ".jpeg", ".gif", ".png"],
                //    uploadCustomData: {
                //        "ownerById": 1,
                //        "ownerByTable": "requestregist"
                //    },
                //    //chunkSize: 200000,
                //    //onUploadStarted: onUploadStarted,
                //});
                //content_Upload_submit.dxButton({
                //    text: "Update profile",
                //    type: "success",
                //    onClick: function () {
                //        DevExpress.ui.dialog.alert("Uncomment the line to enable sending a form to the server.", "Click Handler");
                //        //$("#form").submit();
                //    }
                //});
                scrollView.append(content, PermitInAction.insert ? content_Upload : '');
                scrollView.dxScrollView({
                    width: '100%',
                    height: '100%'
                });
                c.append(scrollView);
                return c;
            },
            //onHidden: (c) => {
            //    $("#dxDataGrid_detail").dxDataGrid('instance').refresh();
            //},
        });


    </script>
}
