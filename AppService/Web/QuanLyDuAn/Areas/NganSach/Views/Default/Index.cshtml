
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Theo dõi ngân sách";
}

@section style{
    <style>
    </style>
}

<div class="row">
    <div class="col-3">
        <div id="container_hangmuc" class="elevation-2"></div>
    </div>
    <div class="col-9">
        <div id="container_nhomcongviec" class="elevation-2"></div>
    </div>
</div>

@section script{
    <script>
        var PROJECTID = isNullOrEmpty(localStorage.getItem("projectIdCurrent")) ? parseInt(localStorage.getItem("projectIdCurrent")) : 0;

        const ACTION_NHOMCONGVIEC = "/NS_NhomCongViec";
        const ACTION_PROJECT = "/Projects";
        const ACTION_HANGMUC = "/NS_HangMuc";
        const ACTION_GIAIDOAN = "/NS_GiaiDoan";
        const ACTION_LOAITHAU = "/NS_LoaiThau";
        //const ACTION_NGANSACHDETAIL = "/NS_NganSachDetail";

        let customStore_Projects = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_PROJECT,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        if (PROJECTID == 0) {
                            localStorage.setItem("projectIdCurrent", parseInt(list[0].id));
                            PROJECTID = parseInt(list[0].id)
                        }
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_HangMuc = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred(), params = {};
                params = { 'findId': 'projectId,' + PROJECTID };
                if (values.filter && values.filter[0] == "parentId")
                    params['FindParentId'] = values.filter[2];
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_HANGMUC,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Hạng mục'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_NhomCongViec = (idHangMuc) => new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred(), params = {};
                params['PageSize'] = isNullOrEmpty(values.take) ? values.take : 0;
                params['PageNumber'] = (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0;
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }

                params['FindId'] = 'hangMucId,' + idHangMuc+''; 

                $.ajax({
                    headers: header,
                    url: URL_API_PM_READ + ACTION_NHOMCONGVIEC+"/GetByGiaiDoan",
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        let list = data.result.items;
                        deferred.resolve(
                            list,
                            {
                                totalCount: list.length,
                            }
                        );
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 5000
                });
                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_NHOMCONGVIEC, values),
            //update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION, key, values),
            //remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION, key),
        });
        let customStore_GiaiDoan = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_GIAIDOAN,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai Đoạn'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        let customStore_LoaiThau = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_LOAITHAU,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai Đoạn'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        $(function () {
            loadHangMuc(); 
        });

        let loadHangMuc = () => {
            $("#container_hangmuc").dxTreeList({
                height: heightScreen,
                dataSource: customStore_HangMuc,
                remoteOperations: {
                    filtering: true,
                    sorting: true,
                    grouping: false
                },
                selection: {
                    mode: "single"
                },
                scrolling: { mode: "standard" },
                rootValue: 0, parentIdExpr: "parentId", keyExpr: "id",
                showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                columns: [
                    {
                        dataField: "tenHangMuc", caption: "hạng mục", dataType: "string",
                        cellTemplate: (c, o) => $("<div />").append((isNullOrEmpty(o.data.kyHieu) ? $("<b>").addClass("mr-1").append(o.data.kyHieu+' -') : null), $("<span>").append(o.value)).appendTo(c)
                    },
                    {
                        dataField: "status", dataType: "number", sortOrder: "desc", visible: false
                    },
                ],
                onToolbarPreparing: function (e) {
                    var container = e.component;
                    e.toolbarOptions.items.unshift(
                        {
                            location: "before", widget: "dxSelectBox",
                            options: {
                                dataSource: customStore_Projects,
                                valueExpr: "id", displayExpr: "title",
                                searchEnabled: true,
                                searchMode: "contains",
                                width: "100%",
                                showClearButton: false,
                                value: PROJECTID,
                                onValueChanged: function (data) {
                                    PROJECTID = data.value;
                                    localStorage.setItem('projectIdCurrent', PROJECTID);
                                    loadHangMuc();
                                },
                            },
                        },
                        {
                            location: "after", widget: "dxButton",
                            options: {
                                icon: "refresh", tylingMode: "filled", type: "default",
                                onClick: () => container.refresh()
                            }
                        })
                },
                onCellPrepared: (e) => {
                    if (e.rowType == "data" && e.columnIndex == 0)
                        e.cellElement.find('.dx-treelist-empty-space').toggleClass("dx-treelist-collapsed", e.data.chilCount > 0)
                },
                onSelectionChanged: (e) => {
                    if (e.selectedRowsData != null && e.selectedRowsData.length > 0 && e.selectedRowsData[0] != null) {
                        loadNhomCongViec(e.selectedRowsData[0].id);
                    }
                },
                stateStoring: {
                    enabled: true,
                    storageKey: "ngansach-hangmuc-localStorage",
                    type: "localStorage"
                },
            });
        };
        let loadNhomCongViec = (idHangMuc) => {
            $("#container_nhomcongviec").dxDataGrid({
                height: heightScreen,
                dataSource: customStore_NhomCongViec(idHangMuc),
                remoteOperations: {
                    paging: true,
                    sorting: true,
                },
                repaintChangesOnly: true,
                showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                paging: {
                    enabled: true,
                    pageSize: 20
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 40],
                    showInfo: true,
                },
                columns: [
                    {
                        dataField: "tenNhomCongViec", caption: "Nhóm công việc", dataType: "string", alignment: "left",
                        cellTemplate: (c, o) => $("<div />").append((o.value == null || o.value.length == 0) ? "--" : o.value).appendTo(c),
                        editorType: "dxTextBox",
                        editorOptions: { 
                            placeholder: "Vui lòng nhập...", 
                        },
                        validationRules: [{ type: "required" }]
                    },//tenNhomCongViec
                    {
                        dataField: "loaiThauId", caption: "Loại Thầu", dataType: "string",
                        lookup: {
                            dataSource: customStore_LoaiThau,
                            valueExpr: "id", displayExpr: "tenLoaiThau",
                        },
                        editorType: "dxLookup",
                        editorOptions: {
                            dataSource: customStore_LoaiThau,
                            valueExpr: "id", displayExpr: "tenLoaiThau",
                            placeholder: "Vui lòng chọn...",
                            searchEnabled: true, showClearButton: true,
                            itemTemplate: function (data) {
                                return $("<div>").append($("<b>").append(data.tenLoaiThau).addClass("mr-1"), $("<em>").append(data.dienGiai));
                            },
                        },
                        cellTemplate: (c, o) => $("<div>").append(o.text, (o.data.chilCount > 0 ? $("<span />").addClass("float-right badge bg-info").append(o.data.chilCount + " chi tiết") : null)).appendTo(c),
                        validationRules: [{ type: "required" }]
                    },//giaiDoanId
                    {
                        dataField: "giaiDoanId", caption: "Giai đoạn", dataType: "string",
                        lookup: {
                            dataSource: customStore_GiaiDoan,
                            valueExpr: "id", displayExpr: "tenGiaiDoan",
                        },
                        editorType: "dxLookup",
                        editorOptions: {
                            dataSource: customStore_GiaiDoan,
                            valueExpr: "id", displayExpr: "tenGiaiDoan",
                            placeholder: "Vui lòng chọn...",
                            searchEnabled: true, showClearButton: true,
                            itemTemplate: function (data) {
                                return $("<div>").append($("<b>").append(data.tenGiaiDoan).addClass("mr-1"), $("<em>").append(data.dienGiai));
                            },
                        },
                        cellTemplate: (c, o) => $("<div>").append(o.text, (o.data.chilCount > 0 ? $("<span />").addClass("float-right badge bg-info").append(o.data.chilCount + " chi tiết") : null)).appendTo(c),
                        validationRules: [{ type: "required" }]
                    },//giaiDoanId
                    {
                        dataField: "giaTri", caption: "Giá trị", dataType: "number", alignment: "center",
                        format: { type: "currency", currency: "VND" },
                        editorType: "dxNumberBox",
                        editorOptions: {
                            showClearButton: true,
                            format: "#,##0 đ",
                            min: 1000000, step: 1000000, showSpinButtons: true,
                        },
                        validationRules: [{ type: "required" }],
                    },//giaTri
                    {
                        dataField: "dienGiai", caption: "Diễn giải", dataType: "string", alignment: "left",
                        cellTemplate: (c, o) => $("<div />").append((o.value == null || o.value.length == 0) ? "--" : o.value).appendTo(c)
                    },//dienGiai
                    {
                        dataField: "isLock", width: 120, caption: "Khóa xổ",
                        editorType: "dxSwitch", dataType: "boolean",
                        cellTemplate: (c, o) => {
                            if (o.value == true) $("<span />").addClass("badge badge-danger p-1").append($("<i/>").addClass("ti-lock mr-1"), "ĐÃ KHÓA").appendTo(c);
                            else $("<span />").addClass("badge badge-info p-1").append($("<i/>").addClass("ti-unlock mr-1"), "CHƯA KHÓA").appendTo(c);
                        }
                    },//isLock
                ],
                editing: {
                    allowAdding: true,
                    mode: "popup",
                    popup: {
                        width: 600, height: "auto",
                        showTitle: true, title: "THEO DÕI NGÂN SÁCH",
                        closeOnOutsideClick: false,
                        showCloseButton: true,
                    },
                    form: {
                        //labelLocation: "left",
                        itemType: "group", colCount: 12, 
                        showRequiredMark: true, requiredMark: "(*)",
                        items: [
                            {
                                colSpan: 12,
                                dataField: "tenNhomCongViec",
                                label: {
                                    text: "Nhóm công việc",
                                    location: "top" },
                                helpText: "Thông tin/Nội dung của nhóm công việc",
                            },
                            {
                                colSpan: 12,
                                dataField: "loaiThauId",
                                label: { text: "Loại thầu" },
                                helpText: "Thuộc loại thầu nào?"
                            },
                            {
                                colSpan: 12,
                                dataField: "giaiDoanId",
                                label: { text: "Giai đoạn" },
                                helpText: "Nằm trong giai đoạn nào của dự án nào?"
                            },
                            {
                                colSpan: 12,
                                dataField: "giaTri",
                                label: { text: "Giá trị" },
                            },
                            {
                                colSpan: 12,
                                dataField: "dienGiai",
                                label: { text: "Diễn giải" },
                            }
                        ]
                    } 
                },
                onInitNewRow: (e) => {
                    e.data.isActive = true;
                    e.data.isVisible = true;
                    e.data.hangMucId = idHangMuc;
                    e.data.isLock = false;
                },
            });
        }; 
    </script>
}