
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Cập nhật giá trị các Hạng mục";
}

<div class="row">
    <div class="col-12"> 
        <div id="container" class="elevation-2"></div>
    </div> 
</div>


@section script{
    <script> 
        const ACTION_PROJECT = "/Projects";
        const ACTION_HANGMUC = "/NS_HangMuc";
        const ACTION_HANGMUCDETAIL = "/NS_HangMucDetail";
        const ACTION_GIAIDOAN = "/NS_GiaiDoan";

        var customStore_Projects = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_PROJECT,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        if (PROJECTID == 0) {
                            localStorage.setItem("projectIdCurrent", parseInt(list[0].id));
                            PROJECTID = parseInt(list[0].id)
                        }
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        var customStore_GiaiDoan = (id)=> new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                let deferred = $.Deferred();
                let params = {
                    'SortCol': 'status',
                    'SortADSC': '1',
                    'isActive': 1,
                    'isVisible': 1
                };
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_GIAIDOAN,
                    success: function (rs) { 
                        var data = rs.result.items.filter(x => x.capDo =='HM');
                        if (id != 0) { 
                            var statusCurrent = data.filter(x => x.id == id)[0].status;
                            data = data.filter(x => x.status > statusCurrent); 
                        }
                        deferred.resolve(data);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai đoạn'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        var customStore_HangMuc = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred();
                let params = {
                    'FindId': 'projectId,' + PROJECTID + ';isActive,1;isVisible,1',
                    'TypeStore': GIAIDOANID
                };
                if (values.filter && values.filter[0] == "parentId")
                    params['FindParentId'] = values.filter[2];
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_HANGMUC+'/Detail',
                    success: function (data) {
                        deferred.resolve(data.result.items, { totalCount: data.result.pagingInfo.totalItems });
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Hạng mục'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            }, 
        });
        var customStore_HangMucDetail = new DevExpress.data.CustomStore({
            key: "id",
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_HANGMUCDETAIL, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_HANGMUCDETAIL, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_HANGMUCDETAIL, key),
            reshapeOnPush: true,
        });

        $(function () {
            loadHangMuc();
        });

        var loadHangMuc = () => {
            $("#container").dxTreeList({
                height: heightScreen,
                dataSource: customStore_HangMuc,
                remoteOperations: {
                    filtering: true,
                    sorting: true,
                    grouping: false
                }, 
                searchPanel: {
                    highlightCaseSensitive: true, highlightSearchText: true, 
                    searchVisibleColumnsOnly: false, visible: true, 
                },
                scrolling: { mode: "standard" },
                rootValue: 0, parentIdExpr: "parentId", keyExpr: "id",
                showBorders: true, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                columns: [
                    {
                        dataField: "tenHangMuc", caption: "Thông tin hạng mục", dataType: "string",
                    },
                    {
                        dataField: "kyHieu", caption: "Ký hiệu", dataType: "string", alignment: "center",
                        cellTemplate: (c, o) => $("<div />").append((isNullOrEmpty(o.data.kyHieu) ? o.data.kyHieu : '--')).appendTo(c)
                    },
                    {
                        dataField: "giaiDoanId", caption: "Giai đoạn", alignment: "center",
                        lookup: {
                            dataSource: customStore_GiaiDoan(0),
                            valueExpr: "id", displayExpr: "tenGiaiDoan",
                        },
                    },
                    {
                        dataField: "giaTri", caption: "Giá trị", dataType: "number", alignment: "center",
                        format: { type: "currency", currency: "VND" },
                        
                    },//giaTri
                    {
                        dataField: "hangMucDetailId", dataType: "number", visible: false,
                    },
                    {
                        dataField: "status", dataType: "number", sortOrder: "desc", visible: false,
                    },
                    {
                        type: "buttons", caption: "Tác vụ", alignment: "center",
                        buttons: [
                            {
                                hint: "Thêm giá trị hạng mục theo giai đoạn", icon: "fas fa-plus-circle",
                                visible: (e) => (e.row.data.chilCount == 0 && PermitInAction["insert"]),
                                onClick: (e) => genUpdateForm(e.row.data, true)
                            },
                            {
                                hint: "Cập nhật giá trị hạng mục theo giai đoạn", icon: "fas fa-edit",
                                visible: (e) => (e.row.data.chilCount == 0 && e.row.data.hangMucDetailId != null && PermitInAction["update"]),
                                onClick: (e) => genUpdateForm(e.row.data, false)
                            },
                            {
                                hint: "Hủy bỏ giá trị hạng mục theo giai đoạn", icon: "fas fa-trash",
                                visible: (e) => (e.row.data.chilCount == 0 && e.row.data.hangMucDetailId != null && PermitInAction["delete"]),
                                onClick: (e) => {
                                    DevExpress.ui.dialog.confirm("Bạn có chắc là muốn hủy bỏ giá trị của hạng mục?", "XÁC NHẬN THÔNG TIN").done(function (dialogResult) {
                                        if (dialogResult) {
                                            var deferred = $.Deferred();
                                            customStore_HangMucDetail.remove(e.row.data.hangMucDetailId).then(() => {
                                                DevExpress.ui.notify("Hủy bỏ giá trị hạng mục thành công", "success", 3000);
                                                $("#container").dxTreeList('instance').refresh();
                                            }, deferred.reject);
                                            return deferred.promise();
                                        }
                                    });
                                }
                            }
                        ]
                    }
                ],
                onRowUpdating(options) { 
                    if (options.oldData.giaiDoanId != null) options.newData['giaiDoanId'] = options.oldData.giaiDoanId; 
                    options.newData['hangMucDetailId'] = options.oldData.hangMucDetailId; 
                    options.newData = options.newData;
                },
                onToolbarPreparing: function (e) {
                    var container = e.component;
                    e.toolbarOptions.items.unshift(
                        {
                            location: "before", widget: "dxSelectBox",
                            options: {
                                dataSource: customStore_Projects,
                                valueExpr: "id", displayExpr: "title",
                                width: "100%", searchEnabled: true, searchMode: "contains",
                                showClearButton: false, stylingMode: "filled",
                                value: PROJECTID,
                                onValueChanged: function (data) {
                                    PROJECTID = data.value;
                                    localStorage.setItem('projectIdCurrent', PROJECTID);
                                    container.refresh();
                                },
                            },
                        },
                        {
                            location: "before", widget: "dxSelectBox",
                            options: {
                                dataSource: customStore_GiaiDoan(0),
                                placeholder:"Xem theo giai đoạn...",
                                valueExpr: "id", displayExpr: "tenGiaiDoan",  
                                width: "100%", searchEnabled: true, searchMode: "contains",
                                stylingMode: "filled", showClearButton: true,
                                value: GIAIDOANID,
                                onValueChanged: function (data) {
                                    GIAIDOANID = data.value;
                                    localStorage.setItem('giaiDoanIdCurrent', GIAIDOANID);
                                    container.refresh();
                                },
                            },
                        },
                        {
                            location: "after", widget: "dxButton",
                            options: {
                                icon: "refresh", tylingMode: "filled", type: "default",
                                onClick: () => container.refresh()
                            }
                        }
                    )
                },
                onCellPrepared: (e) => {
                    if (e.rowType == "data" && e.columnIndex == 0)
                        e.cellElement.find('.dx-treelist-empty-space').toggleClass("dx-treelist-collapsed", e.data.chilCount > 0)
                },
                onRowPrepared: (e) => {
                    if (e.rowType == "data" && e.data.chilCount > 0) {
                        e.rowElement.attr("style","font-weight:bold !important")
                    }
                }, 
                stateStoring: {
                    enabled: true,
                    storageKey: "ngansach-hangmuc-localStorage",
                    type: "localStorage"
                },
            });
        };

        var formData = {};
        var genUpdateForm = (data, type) => $("#popup-main").dxPopup({
            width: 500, height: "auto",
            fullScreen: $(window).width() <= 500,
            dragEnabled: true, resizeEnabled: false,
            showTitle: true, title: type?"Thêm giá trị hang mục theo giai đoạn":"Cập nhật giá trị hạng mục" ,
            showCloseButton: true, closeOnOutsideClick: false,
            visible: true,
            contentTemplate: (c) => {
                formData = type ? {
                    "giaiDoanId": "",
                    "hangMucId": data.id,
                    "giaTri": "",
                    "isActive": true,
                    "isVisible": true
                } : {
                        "id": data.hangMucDetailId,
                        "giaiDoanId": data.giaiDoanId,
                        "giaTri": data.giaTri,
                    }; 
                var scrollView = $("<div id='scrollView'></div>");
                var content = $("<form />").attr("id", "form-container").data("type",type); 
                content.dxForm({
                    formData: formData,
                    labelLocation: "left", requiredMark: "(*)",
                    items: [{
                        itemType: "group", colCount: 12,
                        items: [
                            {
                                colSpan: 12,
                                dataField: "giaiDoanId",
                                label: { text: "Giai đoạn" },
                                editorType: "dxLookup",
                                editorOptions: { 
                                    disabled: !type,
                                    dataSource: customStore_GiaiDoan(type ? (data.giaiDoanId == null ? 0 : data.giaiDoanId):0),
                                    valueExpr: "id", displayExpr: "tenGiaiDoan",
                                    placeholder: "Vui lòng chọn...",
                                    searchEnabled: true, showClearButton: true,
                                    itemTemplate: function (data) {
                                        return $("<div>").append($("<b>").append(data.tenGiaiDoan).addClass("mr-1"), $("<em>").append(data.dienGiai));
                                    },
                                },
                                validationRules: [{ type: "required" }]
                            },
                            {
                                colSpan: 12,
                                dataField: "giaTri",
                                label: { text: "Giá trị" },
                                editorType: "dxNumberBox",
                                editorOptions: {
                                    placeholder: "Vui lòng nhập giá trị...",
                                    showClearButton: true,
                                    format: "#,##0 đ",
                                    min: 1000000, step: 1000000, showSpinButtons: true,
                                },
                                validationRules: [{ type: "required" }]
                            },
                            {
                                itemType: "button", colSpan: 12,
                                horizontalAlignment: "center",
                                buttonOptions: {
                                    height: 35, width: "100%",
                                    text: "Xác nhận",
                                    type: "success",
                                    useSubmitBehavior: true
                                }
                            }
                        ]
                    }]
                }).dxForm("instance");

                scrollView.append(content);
                scrollView.dxScrollView({ width: '100%', height: '100%' });
                c.append(scrollView);
                return c;
            },
            onHiding: () => $("#container").dxTreeList('instance').refresh(),
        });
        $(document).on('submit', '#form-container', function (e) {
            var form = $(this);
            var deferred = $.Deferred();
            if (form.data("type") == true) {
                customStore_HangMucDetail.insert(
                    formData
                ).then(() => {
                    DevExpress.ui.notify("Cập nhật giá trị hạng mục thành công", "success", 3000);
                    $("#popup-main").dxPopup('instance').hide();
                }, deferred.reject);
            } else {
                customStore_HangMucDetail.update(formData.id,
                    formData
                ).then(() => {
                    DevExpress.ui.notify("Cập nhật giá trị hạng mục thành công", "success", 3000);
                    $("#popup-main").dxPopup('instance').hide();
                }, deferred.reject);
            }
            e.preventDefault();
            return deferred.promise();
        }); 
    </script>
}
