
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Cập nhật giá trị các Hạng mục";
}

<div class="row">
    <div class="col-4"> 
        <div id="container_hangmuc" class="elevation-2"></div>
    </div>
    <div class="col-8"> 
        <div id="container_hangmuc_detail" class="elevation-2"></div>
    </div>
</div>


@section script{
    <script>
        var GIAIDOANID = isNullOrEmpty(localStorage.getItem("giaiDoanIdCurrent")) ? parseInt(localStorage.getItem("giaiDoanIdCurrent")) : 0;

        const ACTION_PROJECT = "/Projects";
        const ACTION_HANGMUC = "/NS_HangMuc";
        const ACTION_HANGMUCDETAIL = "/NS_HangMucDetail";
        const ACTION_GIAIDOAN = "/NS_GiaiDoan";

        var customStore_Projects = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_PROJECT,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        if (PROJECTID == 0) {
                            localStorage.setItem("projectIdCurrent", parseInt(list[0].id));
                            PROJECTID = parseInt(list[0].id)
                        }
                        deferred.resolve(list);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Projects'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        var customStore_GiaiDoan = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                let deferred = $.Deferred();
                let params = {
                    'SortCol': 'status',
                    'SortADSC': '1',
                    'isActive': 1,
                    'isVisible': 1
                };
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_GIAIDOAN,
                    success: function (data) {
                        deferred.resolve(data.result.items);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai đoạn'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        var customStore_HangMuc = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred();
                let params = {
                    'findId': 'projectId,' + PROJECTID + ';isActive,1;isVisible,1'
                };
                if (values.filter && values.filter[0] == "parentId")
                    params['FindParentId'] = values.filter[2];
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_HANGMUC,
                    success: function (data) {
                        deferred.resolve(data.result.items, { totalCount: data.result.pagingInfo.totalItems });
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Hạng mục'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        var customStore_HangMucDetail = (id) => new DevExpress.data.CustomStore({
            key: "id", 
            load: (values) => { 
                let deferred = $.Deferred();
                var params = {
                    'FindId': 'hangMucId,'+id,
                    'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                    'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                };
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_HANGMUCDETAIL,
                    success: function (data) {
                        deferred.resolve(data.result.items, { totalCount: data.result.pagingInfo.totalItems });
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai đoạn'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        $(function () {
            loadHangMuc();
        });

        var loadHangMuc = () => {
            $("#container_hangmuc").dxTreeList({
                height: heightScreen,
                dataSource: customStore_HangMuc,
                remoteOperations: {
                    filtering: true,
                    sorting: true,
                    grouping: false
                },
                selection: {
                    mode: "single"
                },
                scrolling: { mode: "standard" },
                rootValue: 0, parentIdExpr: "parentId", keyExpr: "id",
                showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                columns: [
                    {
                        dataField: "tenHangMuc", caption: "hạng mục", dataType: "string",
                    },
                    {
                        dataField: "kyHieu", caption: "Ký hiệu", dataType: "string", alignment: "center",
                        cellTemplate: (c, o) => $("<div />").append((isNullOrEmpty(o.data.kyHieu) ? o.data.kyHieu : '--')).appendTo(c)
                    },
                    {
                        dataField: "status", dataType: "number", sortOrder: "desc", visible: false
                    },
                ],
                onToolbarPreparing: function (e) {
                    var container = e.component;
                    e.toolbarOptions.items.unshift(
                        {
                            location: "before", widget: "dxSelectBox",
                            options: {
                                dataSource: customStore_Projects,
                                valueExpr: "id", displayExpr: "title",
                                searchEnabled: true,
                                searchMode: "contains",
                                width: "100%",
                                showClearButton: false,
                                value: PROJECTID,
                                onValueChanged: function (data) {
                                    PROJECTID = data.value;
                                    localStorage.setItem('projectIdCurrent', PROJECTID);
                                    loadHangMuc();
                                },
                            },
                        },
                        {
                            location: "after", widget: "dxSelectBox",
                            options: {
                                dataSource: customStore_GiaiDoan,
                                valueExpr: "id", displayExpr: "tenGiaiDoan",
                                searchEnabled: true,
                                searchMode: "contains",
                                width: "100%",
                                showClearButton: false,
                                value: GIAIDOANID,
                                onValueChanged: function (data) {
                                    GIAIDOANID = data.value;
                                    localStorage.setItem('giaiDoanIdCurrent', GIAIDOANID); 
                                },
                            },
                        },
                        //{
                        //    location: "after", widget: "dxButton",
                        //    options: {
                        //        icon: "refresh", tylingMode: "filled", type: "default",
                        //        onClick: () => container.refresh()
                        //    }
                        //}
                    )
                },
                onCellPrepared: (e) => {
                    if (e.rowType == "data" && e.columnIndex == 0)
                        e.cellElement.find('.dx-treelist-empty-space').toggleClass("dx-treelist-collapsed", e.data.chilCount > 0)
                },
                onSelectionChanged: (e) => {
                    if (e.selectedRowsData != null && e.selectedRowsData.length > 0 && e.selectedRowsData[0] != null) {
                        if (e.selectedRowsData[0].chilCount == 0) {
                            var id = e.selectedRowsData[0].id;
                            loadHangMucDetail(id);
                            $("#container_hangmuc_detail").fadeIn("fast");
                        }
                        else $("#container_hangmuc_detail").fadeOut("fast");
                    }
                },
                stateStoring: {
                    enabled: true,
                    storageKey: "ngansach-hangmuc-chitiet-localStorage",
                    type: "localStorage"
                },
            });
        };

        var loadHangMucDetail = (iDHangMuc) => {
            $("#container_hangmuc_detail").dxDataGrid({
                height: heightScreen,
                dataSource: customStore_HangMucDetail(iDHangMuc),
                remoteOperations: {
                    paging: true,
                    sorting: true,
                },
                repaintChangesOnly: true,
                showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                paging: {
                    enabled: true,
                    pageSize: 20
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 40],
                    showInfo: true,
                },
                
                columns: [
                    {
                        caption: "STT", alignment: "center",
                        cellTemplate: (c, o) => $("<div />").append(o.rowIndex + 1).appendTo(c),
                    },//STT

                    {
                        dataField: "giaiDoanId", caption: "Giai đoạn", dataType: "string", alignment: "center", 
                        lookup: {
                            dataSource: customStore_GiaiDoan,
                            valueExpr: "id", displayExpr: "tenGiaiDoan",
                        }
                    },
                    {
                        dataField: "giaTri", caption: "Giá trị", dataType: "number", alignment: "center",
                        format: { type: "currency", currency: "VND" },
                        editorType: "dxNumberBox",
                        editorOptions: {
                            showClearButton: true,
                            format: "#,##0 đ",
                            min: 1000000, step: 1000000, showSpinButtons: true,
                        },
                        validationRules: [{ type: "required" }],
                    },//giaTri
                ],
                /*
                editing: {
                    mode: "popup",
                    popup: {
                        width: 600, height: "auto", showTitle: false,
                        closeOnOutsideClick: false,
                        showCloseButton: true,
                    },
                    form: {
                        labelLocation: "left",
                        itemType: "group", colCount: 12,
                        showRequiredMark: true, requiredMark: "(*)",
                        items: [
                            {
                                colSpan: 12,
                                dataField: "loaiCongViecId",
                                label: { text: "Loại công việc" },
                            },
                            {
                                colSpan: 12,
                                dataField: "tenNhomCongViec",
                                label: { text: "Tên nhóm công việc" },
                            },
                            {
                                colSpan: 12,
                                dataField: "dienGiai",
                                label: { text: "Diễn giải" },
                            },
                        ]
                    }
                },
                onInitNewRow: (e) => {
                    e.data.isActive = true;
                    e.data.isVisible = true;
                    e.data.hangMucId = iDHangMuc;
                    e.data.isLock = false;
                },
                onToolbarPreparing: (e) => {
                    var container = e.component;
                    e.toolbarOptions.items.unshift(
                        {
                            location: "before", widget: "dxButton",
                            options: {
                                icon: "add", text: "Nhóm việc", stylingMode: "contained", type: "default",
                                onClick: () => container.addRow()
                            }
                        },
                        {
                            location: "after", widget: "dxButton",
                            options: {
                                icon: "refresh", type: "default",
                                onClick: () => container.refresh()
                            }
                        })
                },
                */
            });
        };
    </script>
}
