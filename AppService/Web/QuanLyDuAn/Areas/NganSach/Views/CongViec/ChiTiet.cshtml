@model int

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Cập nhật giá trị các công việc";
}

<div class="row">
    <div class="col-12">
        <div id="container_congviec" data-id="@Model" class="elevation-2"></div>
    </div>
</div>

@section script{
    <script src="~/Scripts/page/ngansach.js"></script>
    <script> 
        let container_congviec = $("#container_congviec");

        var customStore_GiaiDoan = (id) => new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                let deferred = $.Deferred();
                let params = {
                    'SortCol': 'status',
                    'SortADSC': '1',
                    'FindId': 'projectId,' + PROJECTID + ';isActive,1;isVisible,1'
                };
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_GIAIDOAN,
                    success: function (rs) {
                        var data = rs.result.items.filter(x => x.capDo == 'CV');
                        if (id != 0) {
                            var statusCurrent = data.filter(x => x.id == id)[0].status;
                            data = data.filter(x => x.status > statusCurrent);
                        }
                        deferred.resolve(data);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai đoạn'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        var customStore_CongViec = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred();
                let params = {
                    'FindId': 'nhomCongViecId,' + container_congviec.data("id") + ';isActive,1;isVisible,1',
                    'TypeStore': GIAIDOANID,
                };
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_CONGVIEC + '/Detail',
                    success: function (data) {
                        deferred.resolve(data.result.items, {
                            totalCount: data.result.pagingInfo.totalItems
                        });
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Hạng mục'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
        });
        var customStore_CongViecDetail = new DevExpress.data.CustomStore({
            key: "id",
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_CONGVIECDETAIL, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_CONGVIECDETAIL, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_CONGVIECDETAIL, key),
            reshapeOnPush: true,
        });

        $(function () {
            loadCongViec();
        });

        var loadCongViec = () => container_congviec.dxDataGrid({
            height: heightScreen,
            dataSource: customStore_CongViec,
            remoteOperations: {
                paging: false,
                filtering: true,
                sorting: true,
                grouping: false
            },
            searchPanel: {
                highlightCaseSensitive: true, highlightSearchText: true,
                searchVisibleColumnsOnly: false, visible: true,
            },
            showBorders: true, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
            showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
            columns: [
                {
                    dataField: "status", caption: "STT", width: 80, alignment: "center", sortOrder: "desc",
                }, 
                {
                    dataField: "nhom", groupIndex: 0, caption:"Nhóm",
                },
                {
                    dataField: "tenCongViec", caption: "Thông tin / Nội dung công việc", dataType: "string",
                    cellTemplate: (c, o) => c.append(
                        $("<b>").addClass("font-weight-bold").append(o.value),
                        (o.data.dienGiai != null && o.data.dienGiai.length > 0) ? $("<em />").addClass("mt-1 ml-1").append("- " + o.data.dienGiai) : null
                    )
                }, 
                {
                    dataField: "giaiDoanId", caption: "Giai đoạn", alignment: "center",
                    lookup: {
                        dataSource: customStore_GiaiDoan(0),
                        valueExpr: "id", displayExpr: "tenGiaiDoan",
                    },
                },
                {
                    dataField: "donViTinh", caption: "ĐVT", width: 120, alignment: "center",
                },
                {
                    dataField: "khoiLuong", caption: "Khối lượng", dataType: "number", alignment: "center", 

                },
                {
                    dataField: "donGia", caption: "Đơn giá", dataType: "number", alignment: "center",
                    format: { type: "currency", currency: "VND" },

                },
                {
                    dataField: "thanhTien",caption: "Thành tiền", dataType: "number", alignment: "center",
                    format: { type: "currency", currency: "VND" }, 
                    //cellTemplate: (c, o) => {
                    //    if (o.data.donGia > 0 && o.data.khoiLuong > 0) c.append(o.data.donGia * o.data.khoiLuong);
                    //}
                    calculateCellValue: function (data) {
                        return (data.donGia > 0 && data.khoiLuong > 0)? data.donGia * data.khoiLuong:null;
                    }
                },
                {
                    caption: "Tương tác",
                    alignment: "center", width: 100,
                    cellTemplate: (c, o) => {
                        if (o.data.createBy_Name != null) {
                            $("<div />").attr('id', "popover-target-" + o.key).append(
                                $("<img />").attr("src", "data:image/png;base64," + o.data.createBy_Avartar).addClass("img-circle elevation-2 img-size-30"),
                                (o.data.modifyBy_Name != null && o.data.modifyBy_Name != o.data.createBy_Name) ? $("<img />").attr("src", "data:image/png;base64," + o.data.modifyBy_Avartar).addClass("img-circle elevation-2 img-size-30").attr("style", "margin-left: -15px !important") : null
                            ).appendTo(c);
                            $("<div />").attr('id', "popover-detail-" + o.key).append(
                                "<div><b>" + o.data.createBy_Name + "</b></div><em>" + o.data.createBy_Title + ' - ' + o.data.createBy_Department + "</em><div>" + "(Đã tạo cách đây " + moment(o.data.createDate).locale("vi").fromNow() + ")" + "</div>",
                                (o.data.modifyBy_Name != null) ? "<br/><div><b>" + o.data.modifyBy_Name + "</b></div><em>" + o.data.modifyBy_Title + ' - ' + o.data.modifyBy_Department + "</em><div>" + "(Đã cập nhật cách đây " + moment(o.data.updateDate).locale("vi").fromNow() + ")" + "</div>" : null
                            ).appendTo(c);
                            $("#popover-detail-" + o.key).dxPopover({
                                target: "#popover-target-" + o.key,
                                showEvent: "mouseenter", hideEvent: "mouseleave",
                                position: "bottom",
                                animation: {
                                    show: { type: "pop", from: { scale: 0 }, to: { scale: 1 } },
                                    hide: { type: "fade", from: 1, to: 0 }
                                }
                            });
                        }
                    }
                },
                {
                    dataField: "congViecDetailId", dataType: "number", visible: false,
                }, 
                {
                    type: "buttons", caption: "Tác vụ", alignment: "center",
                    buttons: [ 
                        {
                            hint: "Thêm giá trị theo giai đoạn", icon: "fas fa-plus-circle",
                            visible: (e) => PermitInAction["insert"],
                            onClick: (e) => genUpdateForm(e.row.data, true)
                        },
                        {
                            hint: "Cập nhật giá trị theo giai đoạn", icon: "fas fa-edit",
                            visible: (e) => (e.row.data.nhomCongViecDetailId != null && PermitInAction["update"]),
                            onClick: (e) => genUpdateForm(e.row.data, false)
                        },
                        {
                            hint: "Hủy bỏ giá trị theo giai đoạn", icon: "fas fa-trash",
                            visible: (e) => (e.row.data.nhomCongViecDetailId != null && PermitInAction["delete"]),
                            onClick: (e) => {
                                DevExpress.ui.dialog.confirm("Bạn có chắc là muốn hủy bỏ giá trị của nhóm công việc?", "XÁC NHẬN THÔNG TIN").done(function (dialogResult) {
                                    if (dialogResult) {
                                        var deferred = $.Deferred();
                                        customStore_NhomCongViecDetail.remove(e.row.data.nhomCongViecDetailId).then(() => {
                                            DevExpress.ui.notify("Hủy bỏ giá trị nhóm công việc thành công", "success", 3000);
                                            $("#container").dxDataGrid('instance').refresh();
                                        }, deferred.reject);
                                        return deferred.promise();
                                    }
                                });
                            }
                        }
                    ]
                }
            ], 
            summary: {
                totalItems: [
                    {
                        column: "donGia",
                        summaryType: "sum",
                        valueFormat: { type: "currency", currency: "VND" },
                    },
                    {
                        column: "thanhTien",
                        summaryType: "sum",
                        valueFormat: { type: "currency", currency: "VND" },
                    },
                ],
                groupItems: [
                    {
                        column: "tenCongViec",
                        summaryType: "count",
                        displayFormat: "{0} công việc",
                    }
                ]
            },
            onToolbarPreparing: function (e) {
                var container = e.component;
                e.toolbarOptions.items.unshift(
                    {
                        location: "before", widget: "dxSelectBox",
                        options: {
                            dataSource: customStore_GiaiDoan(0),
                            placeholder: "Xem theo giai đoạn...",
                            valueExpr: "id", displayExpr: "tenGiaiDoan",
                            width: "100%", searchEnabled: true, searchMode: "contains",
                            stylingMode: "filled", showClearButton: true,
                            value: GIAIDOANID,
                            onValueChanged: function (data) {
                                GIAIDOANID = data.value;
                                localStorage.setItem('giaiDoanIdCurrent', GIAIDOANID);
                                container.refresh();
                            },
                        },
                    },
                    {
                        location: "after", widget: "dxButton",
                        options: {
                            icon: "refresh", tylingMode: "filled", type: "default",
                            onClick: () => container.refresh()
                        }
                    }
                )
            },
        });

        var formData = {};
        var genUpdateForm = (data, type) => $("#popup-main").dxPopup({
            width: 500, height: "auto",
            fullScreen: $(window).width() <= 500,
            dragEnabled: true, resizeEnabled: false,
            showTitle: true, title: type ? "Thêm giá trị công việc theo giai đoạn" : "Cập nhật giá trị công việc",
            showCloseButton: true, closeOnOutsideClick: false,
            visible: true,
            contentTemplate: (c) => { 
                formData = type ? {
                    "congViecId": data.id,
                    "giaiDoanId": "", 
                    "reasonId": 0,
                    "donGia": 1000000000,
                    "khoiLuong":1,
                    "isActive": true,
                    "isVisible": true
                } : {
                        "id": data.congViecDetailId,
                        "giaiDoanId": data.giaiDoanId,
                        "donGia": data.giaTri,
                    };
                var scrollView = $("<div id='scrollView'></div>");
                var content = $("<form />").attr("id", "form-container").data("type", type);
                content.dxForm({
                    formData: formData,
                    labelLocation: "left", requiredMark: "(*)",
                    items: [{
                        itemType: "group", colCount: 12,
                        items: [
                            {
                                colSpan: 12,
                                dataField: "giaiDoanId",
                                label: { text: "Giai đoạn" },
                                editorType: "dxLookup",
                                editorOptions: {
                                    disabled: !type,
                                    dataSource: customStore_GiaiDoan(type ? (data.giaiDoanId == null ? 0 : data.giaiDoanId) : 0),
                                    valueExpr: "id", displayExpr: "tenGiaiDoan",
                                    placeholder: "Vui lòng chọn...",
                                    searchEnabled: true, showClearButton: true,
                                    itemTemplate: function (data) {
                                        return $("<div>").append($("<b>").append(data.tenGiaiDoan).addClass("mr-1"), $("<em>").append(data.dienGiai));
                                    },
                                },
                                validationRules: [{ type: "required" }]
                            },
                            {
                                colSpan: 6,
                                dataField: "donGia",
                                label: { text: "Đơn giá", location:"top" },
                                editorType: "dxNumberBox",
                                editorOptions: {
                                    placeholder: "Vui lòng nhập giá trị...",
                                    showClearButton: true, showSpinButtons: true,
                                    format: "#,##0 đ",
                                    min: 1000000, step: 1000000000, 
                                },
                                validationRules: [{ type: "required" }]
                            },
                            {
                                colSpan: 6,
                                dataField: "khoiLuong",
                                label: { text: "Khối lượng", location:"top" },
                                editorType: "dxNumberBox",
                                editorOptions: {
                                    placeholder: "Vui lòng nhập giá trị...",
                                    showClearButton: true, showSpinButtons: true,
                                    min: 0
                                },
                                validationRules: [{ type: "required" }]
                            },
                            {
                                itemType: "button", colSpan: 12,
                                horizontalAlignment: "center",
                                buttonOptions: {
                                    height: 35, width: "100%",
                                    text: "Xác nhận",
                                    type: "success",
                                    useSubmitBehavior: true
                                }
                            }
                        ]
                    }]
                }).dxForm("instance");

                scrollView.append(content);
                scrollView.dxScrollView({ width: '100%', height: '100%' });
                c.append(scrollView);
                return c;
            },
            onHiding: () => $("#container_congviec").dxDataGrid('instance').refresh(),
        });
        $(document).on('submit', '#form-container', function (e) {
            console.log(formData)
            var form = $(this);
            var deferred = $.Deferred();
            if (form.data("type") == true) {
                customStore_CongViecDetail.insert(formData).then(() => {
                    DevExpress.ui.notify("Thêm giá trị công việc thành công", "success", 3000);
                    $("#popup-main").dxPopup('instance').hide();
                }, deferred.reject);
            } else {
                customStore_CongViecDetail.update(formData.id, formData).then(() => {
                    DevExpress.ui.notify("Cập nhật giá trị công việc thành công", "success", 3000);
                    $("#popup-main").dxPopup('instance').hide();
                }, deferred.reject);
            }
            e.preventDefault();
            return deferred.promise();
        }); 
    </script>
}