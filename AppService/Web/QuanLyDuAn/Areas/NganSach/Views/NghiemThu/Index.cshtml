@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Nghiệm thu";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body" style="padding: 0.7rem;">
                <form id="container-filter"></form>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div id="container-main" class="elevation-2"></div>
    </div>
</div>

@section script{
    <script src="~/Scripts/page/ngansach.js"></script>
    <script>
        var MAXDOT; 
        var ds_nghiemthu = (idGoiThau, idGiaiDoan, dot)=> new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred();
                $.ajax({
                    data: {
                        FindId: 'goiThauId,' + idGoiThau + ';giaiDoanId,' + idGiaiDoan + ((dot!=0)?(";dot," + dot):"")
                    },
                    headers: header, dataType: "json",
                    url: URL_API_PM_READ + ACTION_NGHIEMTHU,
                    success: (data) => {
                        var list = data.result.items; 
                        MAXDOT = list.length > 0 ? Math.max.apply(Math, list.map(function (o) { return o.dot; })) : 0;
                        deferred.resolve(list.filter(x => x.dot == MAXDOT), {
                            totalCount: list.filter(x => x.dot == MAXDOT).length
                        });
                        console.log(MAXDOT);
                    },
                    error: function (e) {
                        console.log(e);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    }, 
                });
                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_NGHIEMTHU, values),
        });
        var ds_goithau = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                let deferred = $.Deferred();
                $.ajax({
                    data: { FindParentId: 0, FindId: 'projectId,' + PROJECTID },
                    headers: header, dataType: "json", url: URL_API_PM_READ + ACTION_GOITHAU,
                    success: function (data) {
                        deferred.resolve(data.result.items);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            }
        });
        var ds_giaidoan = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
        	load: (values) => {
        		let deferred = $.Deferred();
        		let params = {
        			'SortCol': 'status', 'SortADSC': '1',
        			'FindId': 'projectId,' + PROJECTID + ';isActive,1;isVisible,1',
        			'KeyWord':'thanh toán'
        		};
        		$.ajax({
        			headers: header, dataType: "json",
        			data: params,
        			url: URL_API_PM_READ + ACTION_GIAIDOAN,
                    success: (rs)=> deferred.resolve(rs.result.items),
        			error: function (xhr) {
                        console.log(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
        				deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai đoạn'. Mở Console để xem chi tiết.");
        			}
        		});
        		return deferred.promise();
        	},
        });
        var ds_congviec_detail = (idGoiThau, idGiaiDoan) => new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred();
                let params = {
                    'SortCol': 'status', 'SortADSC': '1',
                    'FindId': 'goiThauId,' + idGoiThau + ';giaiDoanId,' + idGiaiDoan
                };
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_CONGVIECDETAIL + "/Detail",
                    success: function (rs) {
                        var data = rs.result.items;
                        deferred.resolve(data);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Giai đoạn'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
            update: (values) => {
                let deferred = $.Deferred();
                deferred.resolve(values);
                return deferred.promise();
            },
        });

        $(function () {
            loadFilter();
        });

        var loadFilter = () => $("#container-filter").dxForm({
            labelLocation: "top", requiredMark: "(*)",
            items: [
                {
                    itemType: "group",
                    colCount: 10,
                    items: [
                        {
                            colSpan: 2, dataField: "projectId", label: { text: "Dự án" },
                            editorType: "dxLookup",
                            editorOptions: {
                                dataSource: customStore_Projects,
                                valueExpr: "id", displayExpr: (item) => { return item && item.title + " - " + item.code; },
                                searchEnabled: true, searchMode: "contains",
                                placeholder: "Vui lòng chọn...",
                                itemTemplate: (data, index) => {
                                    return $("<div>").html("<b>" + data.title + "</b> - <em>" + data.code + "</em>");
                                },
                                value: PROJECTID,
                                onValueChanged: (data) => { 
                                    localStorage.setItem('projectIdCurrent', data.value);
                                    location.reload();
                                },
                            },
                            validationRules: [{ type: "required" }]
                        }, 
                        {
                            colSpan: 2, dataField: "goiThauId", label: { text: "Gói thầu" }, 
                            editorType: "dxLookup",
                            editorOptions: {
                                elementAttr: {id:"goiThauIdFilter"},
                                dataSource: ds_goithau,
                                valueExpr: "id", displayExpr: (item) => { return item && item.soHopDong + " - " + item.dienGiai; },
                                searchEnabled: true, searchMode: "contains", 
                                placeholder: "Vui lòng chọn...",
                                itemTemplate: (data) => {
                                    return $("<div>").html("<b>" + data.soHopDong + "</b> - <em>" + data.dienGiai + "</em>");
                                },
                                onValueChanged: function (data) {
                                    listDot().done((rs) => $("#dotFilter").dxSelectBox("instance").option("dataSource", rs));
                                }
                            },
                            validationRules: [{ type: "required" }]
                        }, 
                        {
                            colSpan: 2, dataField: "giaiDoanId", label: { text: "Giai đoạn" }, 
                            editorType: "dxLookup",
                            editorOptions: { 
                                dataSource: ds_giaidoan,
                                elementAttr: { id: "giaiDoanIdFilter" },
                                valueExpr: "id", displayExpr: (item) => { return item && item.tenGiaiDoan + " - " + item.dienGiai; },
                                searchEnabled: true, searchMode: "contains", 
                                placeholder: "Vui lòng chọn...",
                                itemTemplate: (data) => {
                                    return $("<div>").html("<b>" + data.tenGiaiDoan + "</b> - <em>" + data.dienGiai + "</em>");
                                },
                                onValueChanged: function (data) {
                                    listDot().done((rs) => $("#dotFilter").dxSelectBox("instance").option("dataSource", rs));
                                }
                            },
                            validationRules: [{ type: "required" }]
                        }, 
                        {
                            colSpan: 2, dataField: "dot", label: { text: "Đợt nghiệm thu" }, 
                            editorType: "dxSelectBox",
                            editorOptions: {
                                elementAttr: { id: "dotFilter" },
                                placeholder: "Vui lòng nhập...", 
                                itemTemplate: (data) => {
                                    return $("<div>").html("Đợt "+data);
                                },
                            },
                            validationRules: [{ type: "required" }]
                        },
                        {
                            colSpan: 2,itemType: "button", 
                            horizontalAlignment: "center", verticalAlignment:"center",
                            buttonOptions: {
                                height: "50", width: "100%",
                                text: "Tìm kiếm", icon:"search",
                                type: "default",
                                useSubmitBehavior: true
                            }
                        }
                    ]
                }
            ]
        }).dxForm("instance");

        var listDot = () => {
            var d = $.Deferred();            
            ds_nghiemthu(
                $("#goiThauIdFilter").dxLookup('instance').option('value'),
                $("#giaiDoanIdFilter").dxLookup('instance').option('value'),
                0
            ).load().done((rs) => {
                console.log(rs);
                const result = [];
                const map = new Map();
                for (const item of rs) {
                    if (!map.has(item.dot)) {
                        map.set(item.dot, true);
                        result.push(item.dot);
                    }
                }
                d.resolve(result);
            });            
            return d.promise();
        }

        $(document).on('submit', '#container-filter', function (e) {
            var formData = $(this).dxForm('instance').option("formData");
            e.preventDefault();
            loadPanel(formData);
        });

        var loadPanel = (filter) => $("#container-main").dxTabPanel({
            height: heightScreen - $("#container-filter").parent().parent().parent().parent().height(),
            dataSource: [
                {
                    text: "Công việc",
                    icon: "fas fa-circle",
                    template: () => loadDataMain(filter)
                },
                {
                    text: "Phạt",
                    icon: "fas fa-circle",
                    template: () => loadDataSub(filter, "PHAT")
                },
                {
                    text: "Tạm ứng",
                    icon: "fas fa-circle",
                    template: () => loadDataSub(filter, "TAMUNG")
                },
                {
                    text: "Khấu trừ",
                    icon: "fas fa-circle",
                    template: () => loadDataSub(filter, "KHAUTRU")
                }
            ],
            selectedIndex: 1, loop: true, animationEnabled: true, swipeEnabled: false,
            scrollByContent: true, showNavButtons: true,  
            itemTitleTemplate: function (data, index, element) {
                const $item = $("<div>").append(
                    $("<i>").addClass(data.icon),
                    $("<span />").addClass("ml-2 font-weight-bold").text(data.text));
                element.append($item);
            } 
        }).dxTabPanel("instance"); 

        var loadDataMain = (filter) => $("<div />").dxDataGrid({
            dataSource: ds_nghiemthu(filter.goiThauId, filter.giaiDoanId, filter.dot),  
            showBorders: true, showColumnHeaders: true, showColumnLines: true, hoverStateEnabled: true,
            showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
            columns: [
                {
                    dataField: "congViecDetailId", caption: "Tên công việc",
                    lookup: {
                        dataSource: ds_congviec_detail(filter.goiThauId, filter.giaiDoanId),
                        valueExpr: "id", displayExpr: "tenCongViec",
                    },
                },
                {
                    dataField: "dot", caption: "Đợt Nghiệm thu", alignment: "center", width: 100,
                },
                {
                    dataField: "donViTinh",
                    caption: "Đơn vị tính", alignment: "center",
                },
                {
                    caption: "Đơn giá", alignment: "right",
                    dataField: "donGia", width: 150,
                    format: { type: "currency", currency: "VND" },
                },
                {
                    dataField: "tenHangMuc",
                    groupIndex: 0, caption: "Hạng mục"
                },
                {
                    dataField: "tenNhomCongViec",
                    groupIndex: 1, caption: "Nhóm công việc"
                },
                {
                    dataField: "khoiLuong", caption: "Khối lượng", alignment: "right", width: 100,
                },
                {
                    dataField: "thanhTien", caption: "Thành tiền", alignment: "right",
                    calculateCellValue: (rowData) => {
                        return (rowData.donGia * rowData.khoiLuong);
                    },
                    format: { type: "currency", currency: "VND" },
                }
            ]
        });

        var loadDataSub = (filter, type) => {
            if (type == "PHAT") {
                var ds_phat = new DevExpress.data.CustomStore({
                    key: "id",
                    load: (values) => {
                        let deferred = $.Deferred(), params = {};
                        params = {
                            'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                            'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                            'FindId': 'projectId,' + PROJECTID + ';goiThauId,' + filter.goiThauId,
                            'FindParentId': 'phatId,0',
                        };
                        if (values.sort) {
                            params['SortCol'] = values.sort[0].selector;
                            params['SortADSC'] = values.sort[0].desc;
                        }

                        $.ajax({
                            headers: header,
                            url: URL_API_PM_READ + ACTION_PHAT,
                            dataType: "json",
                            data: params,
                            success: function (data) {
                                deferred.resolve(data.result.items, {
                                    totalCount: data.result.pagingInfo.totalItems
                                });
                            },
                            error: function (xhr, textStatus, errorThrown) {
                                console.log(xhr.responseJSON);
                                deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                            }
                        });
                        return deferred.promise();
                    },
                    insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_PHAT, values),
                    update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_PHAT, key, values),
                    remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_PHAT, key),
                    onInserted: (key, values) => ajax_log_insert("Insert", ACTION_PHAT, values, key),
                    onUpdated: (key, values) => ajax_log_insert("Update", ACTION_PHAT, key, values),
                    onRemoved: (key) => ajax_log_insert("Delete", ACTION_PHAT, key, null),
                }); 
                var ds_phat_theodoi = (id) => new DevExpress.data.CustomStore({
                    key: "id",
                    load: (values) => {
                        let deferred = $.Deferred();
                        var params = {
                            'FindId': "phatId," + id,
                            'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                            'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                        };
                        if (values.sort) {
                            params['SortCol'] = values.sort[0].selector;
                            params['SortADSC'] = values.sort[0].desc;
                        }

                        $.ajax({
                            headers: header,
                            url: URL_API_PM_READ + ACTION_PHAT_THEODOI,
                            dataType: "json", async: false,
                            data: params,
                            success: function (data) {
                                var list = data.result.items;
                                deferred.resolve(list, {
                                    totalCount: data.result.pagingInfo.totalItems
                                });
                            },
                            error: function (xhr, textStatus, errorThrown) {
                                console.log(xhr.responseJSON);
                                deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                            },
                        });
                        return deferred.promise();
                    },
                    insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_PHAT_THEODOI, values),
                    update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_PHAT_THEODOI, key, values),
                    remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_PHAT_THEODOI, key),
                    //onInserted: (key, values) => ajax_log_insert("Insert", ACTION_PHAT_THEODOI, values, key),
                    //onUpdated: (key, values) => ajax_log_insert("Update", ACTION_PHAT_THEODOI, key, values),
                    //onRemoved: (key) => ajax_log_insert("Delete", ACTION_PHAT_THEODOI, key, null),
                });
                return $("<div />").dxDataGrid({
                    dataSource: ds_phat,
                    remoteOperations: {
                        paging: true, sorting: true,
                    },
                    paging: { enabled: true, pageSize: 10 },
                    pager: {
                        showPageSizeSelector: true, showInfo: true,
                        allowedPageSizes: [10, 20, 40, 80],
                    },
                    searchPanel: {
                        highlightCaseSensitive: true, highlightSearchText: true,
                        searchVisibleColumnsOnly: true, visible: true
                    },
                    showBorders: true, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                    showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                    columns: [
                        {
                            dataField: "noiDung", alignment: "left",
                            caption: "Nội dung / Thông tin phạt", width: ($("#container-main").width()<=990?250: null),
                            cellTemplate: (c, o) => { 
                                $("<div/>").addClass("font-weight-bold").append(o.value).appendTo(c);
                                if (o.data.dienGiai != null && o.data.dienGiai.length > 0)
                                    $("<em />").addClass("text-muted").append("Diễn giải: " + o.data.dienGiai).appendTo(c);
                            },
                            editorOptions: { placeholder: "Vui lòng nhập..." },
                            validationRules: [{ type: "required" }]
                        }, 
                        {
                            dataField: "nhomPhatId", caption: "Nhóm", width: 200,
                            lookup: {
                                dataSource: customStore_Phat_Nhom,
                                valueExpr: "id", displayExpr: "tenNhomPhat",
                            },
                            editorType: "dxSelectBox",
                            editorOptions: {
                                dataSource: customStore_Phat_Nhom,
                                valueExpr: "id", displayExpr: "tenNhomPhat",
                                placeholder: "Vui lòng chọn...",
                                searchEnabled: true,
                                itemTemplate: function (data) {
                                    return $("<div>").append(
                                        $("<b>").append(data.tenNhomPhat).addClass("mr-1"),
                                        $("<em>").append(data.dienGiai));
                                },
                            },
                            groupIndex: 0, autoExpandGroup: true,
                            validationRules: [{ type: "required" }]
                        },
                        {
                            dataField: "dienGiai", alignment: "left", visible: false,
                            editorOptions: { placeholder: "Vui lòng nhập..." }
                        },
                        {
                            dataField: "chilCount", dataType: "number", alignment: "center",
                            width: 110, caption: "Số đợt thu hồi",
                            customizeText: function (cellInfo) {
                                return cellInfo.value > 0 ? cellInfo.value + " đợt" : 'Chưa có';
                            }
                        },
                        {
                            caption: "Giá trị", alignment: "center",
                            columns: [
                                {
                                    dataField: "giaTri", width: 120, dataType: "number", alignment: "right",
                                    format: { type: "currency", currency: "VND" },
                                    caption: "Phạt",
                                    editorType: "dxNumberBox",
                                    editorOptions: {
                                        placeholder: "Vui lòng nhập giá trị...",
                                        showClearButton: true,
                                        format: "#,##0 đ",
                                        min: 1000000, step: 1000000, showSpinButtons: true,
                                    },
                                    validationRules: [{ type: "required" }]
                                },
                                {
                                    dataField:"giaTriThuHoi", width: 120, dataType: "number", alignment: "right",
                                    format: { type: "currency", currency: "VND" },
                                    caption: "Đã thu hồi",
                                    calculateCellValue: function (data) {
                                        var value = (data.giaTriCon == null) ? 0 : (data.giaTri - data.giaTriCon);
                                        return (value != null) ? value : 0;
                                    }
                                },
                                {
                                    dataField: "giaTriCon", width: 120, dataType: "number", alignment: "right",
                                    format: { type: "currency", currency: "VND" },
                                    caption: "Còn lại",
                                    calculateCellValue: function (data) {
                                        return (data.giaTriCon != null) ? data.giaTriCon : 0;
                                    }
                                }, 
                            ]
                        },
                        {
                            caption: "Tương tác",
                            alignment: "center", width: 100,
                            cellTemplate: (c, o) => {
                                if (o.data.createBy_Name != null) {
                                    $("<div />").attr('id', "popover-target-main-" + o.key).append(
                                        $("<img />").attr("src", "data:image/png;base64," + o.data.createBy_Avartar).addClass("img-circle elevation-2 img-size-30"),
                                        (o.data.modifyBy_Name != null && o.data.modifyBy_Name != o.data.createBy_Name) ? $("<img />").attr("src", "data:image/png;base64," + o.data.modifyBy_Avartar).addClass("img-circle elevation-2 img-size-30").attr("style", "margin-left: -15px !important") : null
                                    ).appendTo(c);
                                    $("<div />").attr('id', "popover-detail-main-" + o.key).append(
                                        "<div><b>" + o.data.createBy_Name + "</b></div><em>" + o.data.createBy_Title + ' - ' + o.data.createBy_Department + "</em><div>" + "(Đã tạo cách đây " + moment(o.data.createDate).locale("vi").fromNow() + ")" + "</div>",
                                        (o.data.modifyBy_Name != null) ? "<br/><div><b>" + o.data.modifyBy_Name + "</b></div><em>" + o.data.modifyBy_Title + ' - ' + o.data.modifyBy_Department + "</em><div>" + "(Đã cập nhật cách đây " + moment(o.data.updateDate).locale("vi").fromNow() + ")" + "</div>" : null
                                    ).appendTo(c);
                                    $("#popover-detail-main-" + o.key).dxPopover({
                                        target: "#popover-target-main-" + o.key,
                                        showEvent: "mouseenter", hideEvent: "mouseleave",
                                        position: "bottom",
                                        animation: {
                                            show: { type: "pop", from: { scale: 0 }, to: { scale: 1 } },
                                            hide: { type: "fade", from: 1, to: 0 }
                                        }
                                    });
                                }
                            }
                        },
                        {
                            dataField: "createDate", width: 150, dataType: "date", alignment: "center",
                            caption: "Thời gian tạo",
                            cellTemplate: (c, o) => {
                                $("<div />").append(
                                    $("<em />").addClass("small").append("Cách đây " + moment(o.value).locale("vi").fromNow()),
                                    $("<div/>").addClass("font-weight-bold").append(moment(o.value).format("HH:mm DD/MM/YY"))
                                ).appendTo(c);
                            }
                        }, 
                    ],
                    editing: {
                        mode: "popup", useIcons: true, confirmDelete: true,
                        popup: {
                            width: 600, height: "auto", closeOnOutsideClick: true,
                            showTitle: false, fullScreen: $(document).width() <= 600,
                            position: { of: "document" },
                        },
                        form: {
                            labelLocation: "top", itemType: "group", colCount: 6,
                            showRequiredMark: true, requiredMark: "(*)",
                            items: [ 
                                {
                                    colSpan: 6, dataField: "nhomPhatId", label: { text: "Nhóm phạt" },
                                },
                                {
                                    colSpan: 6, dataField: "noiDung", label: { text: "Nội dung phạt" },
                                },
                                {
                                    colSpan: 6, dataField: "dienGiai", label: { text: "Diễn giải (nếu có)" },
                                },
                                {
                                    colSpan: 6, dataField: "giaTri", label: { text: "Số tiền phạt" },
                                },
                            ]
                        }
                    },
                    summary: {
                        totalItems: [
                            {
                                column: "giaTri",
                                summaryType: "sum",
                                valueFormat: { type: "currency", currency: "VND" },
                            },
                            {
                                column: "giaTriThuHoi",
                                summaryType: "sum",
                                valueFormat: { type: "currency", currency: "VND" },
                            },
                            {
                                column: "giaTriCon",
                                summaryType: "sum",
                                valueFormat: { type: "currency", currency: "VND" },
                            },
                        ],
                    },
                    onInitNewRow: (e) => {
                        e.data.projectId = PROJECTID;
                        e.data.goiThauId = filter.goiThauId;
                        e.data.isActive = true;
                        e.data.giaTri = 1000000;
                        e.data.giaTriCon = 1000000;
                    }, 
                    onRowInserting: (e) => {
                        e.data.giaTriCon = e.data.giaTri;
                    },
                    onRowUpdating: (e) => {
                        if (e.newData['giaTri'] != null)
                            e.newData['giaTriCon'] = e.newData['giaTri'];
                    },
                    onEditorPreparing: (e) => {
                        if (e.parentType === "dataRow" && (e.dataField === "giaTri" && e.row.data.chilCount > 0) && !e.row.isNewRow) {
                            e.editorOptions.disabled = true;
                        }
                    },
                    onToolbarPreparing: (e) => {
                        var container = e.component;
                        e.toolbarOptions.items.unshift(
                            {
                                location: "before", widget: "dxButton",
                                options: {
                                    icon: "add", text: "Thêm mới", stylingMode: "filled", type: "default",
                                    visible: PermitInAction.insert,
                                    onClick: () => container.addRow()
                                }
                            },
                            {
                                location: "after", widget: "dxButton",
                                options: {
                                    icon: "refresh", type: "default",
                                    onClick: () => container.refresh()
                                }
                            },
                        );
                    },
                    onContextMenuPreparing: (e) => { 
                        if (e.row !== "undefined" && e.target == "content" && e.row != null && e.row.rowType == 'data') {                             
                            if (!e.items) e.items = [];
                            e.items.push({
                                visible: PermitInAction.update,
                                icon: "edit",
                                text: "Cập nhật thông tin",
                                onItemClick: () => e.component.editRow(e.row.rowIndex)
                            });
                            e.items.push({
                                visible: PermitInAction.delete,
                                icon: "remove",
                                text: "Xóa bỏ thông tin",
                                onItemClick: () => e.component.deleteRow(e.row.rowIndex)
                            });
                        }
                    },
                    masterDetail: {
                        enabled: true,
                        template: function (container, options) {
                            container.attr("style", "background-color: rgb(248,141,43) !important; padding: 10px !important;") 
                            var data = options.data; 
                            $("<div />").addClass("elevation-2").dxDataGrid({
                                dataSource: ds_phat_theodoi(data.id),
                                remoteOperations: { paging: true, sorting: true },
                                showBorders: true, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                                columns: [
                                    {
                                        dataField: "dot", alignment: "center", width: 150,
                                        caption: "Đợt thu hồi", sortOrder: "desc", dataType: "number", 
                                    },
                                    {
                                        dataField: "noiDung", alignment: "left",
                                        caption: "Nội dung / Thông tin Phạt",
                                        cellTemplate: (c, o) => {
                                            $("<div/>").addClass("font-weight-bold").append(o.value).appendTo(c);
                                            if (o.data.dienGiai != null && o.data.dienGiai.length > 0)
                                                $("<em />").addClass("text-muted").append("Diễn giải: " + o.data.dienGiai).appendTo(c);
                                        },
                                        editorOptions: { placeholder: "Vui lòng nhập..." },
                                        validationRules: [{ type: "required" }]
                                    },
                                    {
                                        dataField: "dienGiai", alignment: "left", caption: "Diễn giải", visible: false,
                                        editorOptions: { placeholder: "Vui lòng nhập..." },
                                    },
                                    {
                                        dataField: "giaTri", width: 200, dataType: "number", alignment: "right",
                                        format: { type: "currency", currency: "VND" },
                                        caption: "Giá trị thu hồi",
                                        editorType: "dxNumberBox",
                                        editorOptions: {
                                            placeholder: "Vui lòng nhập giá trị...",
                                            showClearButton: true,
                                            format: "#,##0 đ",
                                            min: 1000000, step: 1000000, showSpinButtons: true,
                                        },
                                        //validationRules: [
                                        //    { type: "required" },
                                        //    {
                                        //        type: "async",
                                        //        message: "Số tiền thanh toán không lớn hơn giá trị còn lại",
                                        //        validationCallback: function (params) {
                                        //            return checkGiaTriConLai(params);
                                        //        }
                                        //    }
                                        //]
                                    },
                                    {
                                        caption: "Tương tác",
                                        alignment: "center", width: 100,
                                        cellTemplate: (c, o) => {
                                            if (o.data.createBy_Name != null) {
                                                $("<div />").attr('id', "popover-target-" + o.key).append(
                                                    $("<img />").attr("src", "data:image/png;base64," + o.data.createBy_Avartar).addClass("img-circle elevation-2 img-size-30"),
                                                    (o.data.modifyBy_Name != null && o.data.modifyBy_Name != o.data.createBy_Name) ? $("<img />").attr("src", "data:image/png;base64," + o.data.modifyBy_Avartar).addClass("img-circle elevation-2 img-size-30").attr("style", "margin-left: -15px !important") : null
                                                ).appendTo(c);
                                                $("<div />").attr('id', "popover-detail-" + o.key).append(
                                                    "<div><b>" + o.data.createBy_Name + "</b></div><em>" + o.data.createBy_Title + ' - ' + o.data.createBy_Department + "</em><div>" + "(Đã tạo cách đây " + moment(o.data.createDate).locale("vi").fromNow() + ")" + "</div>",
                                                    (o.data.modifyBy_Name != null) ? "<br/><div><b>" + o.data.modifyBy_Name + "</b></div><em>" + o.data.modifyBy_Title + ' - ' + o.data.modifyBy_Department + "</em><div>" + "(Đã cập nhật cách đây " + moment(o.data.updateDate).locale("vi").fromNow() + ")" + "</div>" : null
                                                ).appendTo(c);
                                                $("#popover-detail-" + o.key).dxPopover({
                                                    target: "#popover-target-" + o.key,
                                                    showEvent: "mouseenter", hideEvent: "mouseleave",
                                                    position: "bottom",
                                                    animation: {
                                                        show: { type: "pop", from: { scale: 0 }, to: { scale: 1 } },
                                                        hide: { type: "fade", from: 1, to: 0 }
                                                    }
                                                });
                                            }
                                        }
                                    },
                                    {
                                        dataField: "createDate", width: 150, dataType: "date", alignment: "center",
                                        caption: "Thời gian tạo",
                                        cellTemplate: (c, o) => {
                                            $("<div>").append(
                                                $("<em/>").addClass("small").append("Cách đây " + moment(o.value).locale("vi").fromNow()),
                                                $("<div/>").addClass("font-weight-bold").append(moment(o.value).format("HH:mm DD/MM/YY"))
                                            ).appendTo(c);
                                        }
                                    }
                                ],
                                editing: {
                                    //    allowUpdating: (e) => {
                                    //        return PermitInAction.update;
                                    //    },
                                    //    allowDeleting: (e) => {
                                    //        return PermitInAction.delete && e.row.data.dot == MAXDOT;
                                    //    },
                                    mode: "popup", useIcons: true, confirmDelete: true,
                                    popup: {
                                        width: 600, height: "auto", closeOnOutsideClick: true,
                                        showTitle: false, fullScreen: $(document).width() <= 600,
                                    },
                                    form: {
                                        labelLocation: "top", itemType: "group", colCount: 6,
                                        showRequiredMark: true, requiredMark: "(*)",
                                        items: [
                                            {
                                                colSpan: 6, dataField: "giaTri", label: { text: "Số tiền thu hồi" },
                                            },
                                            {
                                                colSpan: 6, dataField: "noiDung", label: { text: "Nội dung thu hồi" },
                                            },
                                            {
                                                colSpan: 6, dataField: "dienGiai", label: { text: "Diễn giải (nếu có)" },
                                            },
                                        ]
                                    }
                                },
                                onInitNewRow: (e) => {
                                    e.data.phatId = data.id;
                                    e.data.giaTri = 1000000;
                                    e.data.dot = filter.dot;
                                },
                                onContextMenuPreparing: (e) => {
                                    console.log(e);
                                    if (!e.items) e.items = [];
                                    e.items.push({
                                        visible: PermitInAction.insert,
                                        icon: "add",
                                        text: "Thêm đợt thu hồi",
                                        onItemClick: () => e.component.addRow()
                                    });
                                    if (e.row !== "undefined" && e.row != null && e.target == "content" && e.row.rowType == 'data' ) {
                                         
                                        //e.items.push({
                                        //    visible: PermitInAction.update,
                                        //    icon: "edit",
                                        //    text: "Cập nhật thông tin",
                                        //    onItemClick: () => e.component.editRow(e.row.rowIndex)
                                        //});
                                        //e.items.push({
                                        //    visible: PermitInAction.delete,
                                        //    icon: "remove",
                                        //    text: "Xóa bỏ thông tin",
                                        //    onItemClick: () => e.component.deleteRow(e.row.rowIndex)
                                        //}); 
                                    }
                                },
                            }).appendTo(container);
                        }
                    }
                });
            }
        } 
    </script>
}