
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Các hạng mục";
}

@section style{    
}

<div class="row">
    <div class="col-xl-8 col-lg-12">
        <div id="container" class="elevation-2"></div>
    </div>
</div>

@section script{
    <script src="~/Scripts/page/ngansach.js"></script>
    <script>
        //var customStore2 =  new DevExpress.data.DataSource({
        //    store: DevExpress.data.AspNet.createStore({
        //        key: "id",
        //        loadUrl: "https://api-pm-read.tayho.com.vn/api/read/v1/ProjectManager", 
        //        onBeforeSend: function (method, ajaxOptions) {
        //            console.log(method);
        //            console.log(ajaxOptions);
        //            ajaxOptions.method = 'post';
        //            ajaxOptions.contentType = 'application/json'; 
        //            ajaxOptions.data = JSON.stringify({
        //                "nameEF": "NS_HangMuc",
        //                "devRequestLoadOptionsViewModel": { }
        //            });
        //        }
        //    }),
        //});
        var customStore2 = new DevExpress.data.DataSource({
            store: new DevExpress.data.CustomStore({
                key: "id",
                load: (loadOptions) => {
                    let deferred = $.Deferred();
                    console.log(loadOptions);
                    var data = {
                        'nameEF': 'NS_GiaiDoan',
                        'devRequestLoadOptionsViewModel': loadOptions
                    };
                    console.log(data);
                    $.ajax({
                        headers: header,
                        url: "https://api-pm-read.tayho.com.vn/api/read/v1/ProjectManager",
                        dataType: "json",
                        method: "POST",
                        data: JSON.stringify(data),
                        success: function (result) {
                            deferred.resolve(result.data, {
                                totalCount: result.totalCount,
                                summary: result.summary,
                                groupCount: result.groupCount
                            });
                        },
                        error: function (xhr) {
                            console.log(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
                            deferred.reject("Đã có lỗi xảy ra trong quá trình này. Mở Console để xem chi tiết hoặc liên hệ Quản trị viên.");
                        },
                    });
                    return deferred.promise();
                },
            }),
            filter: ["projectId", "=", PROJECTID],
            sort: [{ selector: "caoDo", desc: true }]
        });
        
        var ds_main = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred(), params = { 'FindId': 'projectId,' + PROJECTID };
                if (values.filter && values.filter[0] == "parentId") params['FindParentId'] = values.filter[2];
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header,
                    url: URL_API_PM_READ + ACTION_HANGMUC,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        deferred.resolve(data.result.items, { totalCount: data.result.pagingInfo.totalItems });
                    },
                    error: function (xhr) {
                        console.log(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
                        deferred.reject("Đã có lỗi xảy ra trong quá trình này. Mở Console để xem chi tiết hoặc liên hệ Quản trị viên.");
                    },
                });
                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_HANGMUC, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_HANGMUC, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_HANGMUC, key),
        }); 

        $(function () {
            loadData2(); /*\\ new DevExpress.data.DataSource({*/
        });
        var loadData2 = () => $("#container").dxDataGrid({
            height: heightScreen,
            dataSource: customStore2,
            remoteOperations: true,
            filterRow: { visible: true },
            filterPanel: { visible: true },
            headerFilter: { visible: true },
            grouping: {
                autoExpandAll: true
            },
            searchPanel: {
                visible: true,
                highlightCaseSensitive: true
            },
            paging: {
                pageSize: 10
            }, 
            columns: [
                {
                    dataField: "tenGiaiDoan", allowFiltering:true
                },
                {
                    dataField: "capDo", allowFiltering: true, groupIndex: 0
                }
            ] 
        });

        var loadData = () => $("#container").dxTreeList({
                height: heightScreen,
                dataSource: ds_main,
                repaintChangesOnly: true,
                remoteOperations: {
                    filtering: true,
                    sorting: true,
                    grouping: false
                },
                scrolling: { mode: "standard" },
                rootValue: 0, parentIdExpr: "parentId", keyExpr: "id",
                showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
                columns: [
                    {
                        dataField: "tenHangMuc", caption: "Thông tin / Tiêu đề",
                        dataType: "string", width: ($("#container").width() <= 1000 ? 300 : null),
                        cellTemplate: (c, o) => c.addClass(o.data.chilCount > 0 ? "font-weight-bold" : "").append(o.value),
                        editorOptions: {
                            placeholder: "Vui lòng nhập..."
                        },
                        validationRules: [{ type: "required" }]
                    },
                    {
                        dataField: "kyHieu", caption: "Ký Hiệu", width: 100,
                        dataType: "string", alignment: "center",
                        editorOptions: {
                            placeholder: "Vui lòng nhập..."
                        }
                    },
                    {
                        dataField: "status", caption: "Sắp xếp",
                        dataType: "number", width: 110, alignment: "center",
                        editorType: "dxNumberBox",
                        editorOptions: {
                            min: 1, step: 1,
                            showSpinButtons: true,
                        }, sortOrder: "desc"
                    },
                    {
                        dataField: "id", caption: "ID",
                        width: 100, alignment: "center", allowEditing: false,
                    },
                    {
                        dataField: "parentId", caption: "Parent ID",
                        width: 100, alignment: "center",
                    },
                    {
                        dataField: "isActive", caption:"Tình trạng",
                        width: 130, alignment: "center",
                        //editorType: "dxSwitch",
                        lookup: {
                            dataSource: listActiveStatus,
                            valueExpr: "value", displayExpr: "text",
                        },
                        cellTemplate: (c, o) => $("<span />").addClass("badge badge-" + listActiveStatus.find(x => x.value == o.value).color).append($("<i />").addClass("mr-1 " + listActiveStatus.find(x => x.value == o.value).icon), o.text).appendTo(c)
                    }, 
                    {
                        type: "buttons", caption: "Tác vụ",
                        width: 120, alignment: "center",
                        buttons: [{
                            text: "Thêm",
                            visible: PermitInAction["insert"],
                            onClick: function (e) {
                                $.ajax({
                                    async: false,
                                    headers: header, dataType: "json",
                                    url: URL_API_PM_READ + "/NS_HangMucDetail",
                                    data: { FindId: "hangMucId," + e.row.data.id + ";projectId," + PROJECTID },
                                    success: function (rs) {
                                        if (rs.isOk == true && rs.result.pagingInfo.totalItems > 0) {
                                            DevExpress.ui.notify("Không thể thêm hạng mục con vì hạng mục này đã được cập nhật giá trị", "error", 3000);
                                        } else e.component.addRow(e.row.data.id);
                                    },
                                    error: function (xhr) {
                                        console.log(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
                                        deferred.reject("Đã có lỗi xảy ra trong quá trình này. Mở Console để xem chi tiết hoặc liên hệ Quản trị viên.");
                                    }
                                });
                            }
                        }, "edit", "delete"]
                    }
                ], 
                paging: { enabled: false }, 
                searchPanel: {
                    highlightCaseSensitive: true, highlightSearchText: true,
                    visible: true, searchVisibleColumnsOnly: true,
                },
                editing: {
                    allowAdding: PermitInAction["insert"] ? true : null,
                    allowUpdating: PermitInAction["update"] ? true : null,
                    allowDeleting: PermitInAction["delete"] ? true : null,
                    mode: "cell", useIcons: false, confirmDelete: true,
                },
                onToolbarPreparing: function (e) {
                    var container = e.component;
                    e.toolbarOptions.items.unshift(
                        {
                            location: "before", widget: "dxSelectBox",
                            options: {
                                dataSource: customStore_Projects,
                                valueExpr: "id", displayExpr: "title",
                                searchEnabled: true, searchMode: "contains",
                                width: "100%",
                                showClearButton: false,
                                value: PROJECTID,
                                onValueChanged: (data) => {
                                    PROJECTID = data.value;
                                    localStorage.setItem('projectIdCurrent', PROJECTID);
                                    loadData(customStore);
                                },
                            },
                        }, 
                        {
                            location: "after", widget: "dxButton",
                            options: {
                                icon: "refresh", type: "default",
                                onClick: () => container.refresh()
                            }
                        })
                },
                onInitNewRow: (e) => {
                    e.data.isActive = true;
                    e.data.isVisible = true;
                    e.data.status = 0;
                    e.data.ProjectId = PROJECTID;
                },
                onCellPrepared: (e) => {
                    if (e.rowType == "data" && e.column.dataField == "tenHangMuc")
                        e.cellElement.find('.dx-treelist-empty-space').toggleClass("dx-treelist-collapsed", e.data.chilCount > 0);
                }
            }); 
    </script>
}