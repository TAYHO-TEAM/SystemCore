
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Thông tin nhà thầu";
}
 

<div class="row">
    <div class="col-12">
        <div id="container" class="elevation-2"></div>
    </div>
</div>
<input type="file" id="inputImport" style="display:none;" accept=".xls,.xlsx" />
@section script{
    <script>
        const ACTION = "/ContractorInfo"; 
        let customStore = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred(), params = {};

                params = {
                    'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                    'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                };
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }

                $.ajax({
                    headers: header,
                    url: URL_API_PM_READ + ACTION,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        deferred.resolve(
                            data.result.items,
                            {
                                totalCount: data.result.pagingInfo.totalItems,
                            }
                        );
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 5000
                });
                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION, key),
        });
        $(function () {
            loadData(customStore);
        });
        let loadData = (dataSource) => {
            $("#container").dxDataGrid({
                height: heightScreen,
                dataSource: dataSource,
                remoteOperations: {
                    paging: true,
                    sorting: true,
                },
                repaintChangesOnly: true, 
                showBorders: false, showColumnHeaders: true, showColumnLines: true, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: true,
                columns: [
                    {
                        caption: "STT", dataField: "status",
                        width: 80, alignment: "center", sortOrder:"desc"
                    },
                    {
                        dataField: "name", caption: "Tên nhà thầu",
                        dataType: "string",
                        validationRules: [{ type: "required" }]
                    },
                    {
                        dataField: "code", dataType: "string", alignment:"center",
                        validationRules: [{ type: "required" }]
                    },
                    {
                        dataField: "descriptions", caption: "Thông tin khác",
                        dataType: "string",
                    },
                    "businessAreas", "country", "city", "district", "address", "phone", "email",
                    {
                        dataField: "isActive", width: 100,
                        editorType: "dxSwitch", dataType: "boolean",
                        allowExporting: false,
                    }, 

                ],
                paging: {
                    enabled: true,
                    pageSize: 20
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 40],
                    showInfo: true, 
                },
                searchPanel: {
                    highlightCaseSensitive: true,
                    highlightSearchText: true, 
                    searchVisibleColumnsOnly: true,
                    visible: true
                },
                editing: { 
                    allowUpdating: PermitInAction.update,
                    allowDeleting: PermitInAction.delete,
                    mode: "cell",
                    useIcons: false,
                    confirmDelete: true 
                }, 
                onToolbarPreparing: function (e) {
                    var container = e.component;
                    e.toolbarOptions.items.unshift( 
                        {
                            location: "before",
                            widget: "dxButton",
                            options: {
                                icon: "add", text: "Thêm",
                                stylingMode: "filled", type: "default",
                                visible: PermitInAction.insert,
                                onClick: () => container.addRow()
                            }
                        }, 
                        {
                            location: "before", widget: "dxButton",
                            options: {
                                icon: "upload",text: "Import",
                                stylingMode: "filled", type: "default",
                                onClick: () => {
                                    $("#inputImport").trigger("click");
                                }
                            }
                        },
                        {
                            location: "before", widget: "dxButton",
                            options: {
                                icon: "download",text: "Export",
                                stylingMode: "filled", type: "default",
                                onClick: () => container.exportToExcel(false)
                            }
                        },
                        {
                            location: "after", widget: "dxButton",
                            options: {
                                icon: "refresh",
                                onClick: () => container.refresh()
                            }
                        }
                    )
                },
                onInitNewRow: (e) => {
                    e.data.isActive = true; 
                    e.data.status = 1; 
                },
                rowDragging: {
                    allowReordering: PermitInAction.update,
                    showDragIcons: true,
                    dropFeedbackMode: "push",
                    dragDirection: "vertical",
                    onDragEnd: function (e) {
                        var source = e.itemData,
                            target = e.component.getVisibleRows()[e.toIndex].data,
                            d = $.Deferred();
                        if (source.id != target.id) {
                            customStore.update(source.id, { status: target.status }).then(() => {
                                e.component.refresh().then(d.resolve, d.reject);
                            }, d.reject);
                        }
                    },
                },
                onExporting: function (e) {
                    var workbook = new ExcelJS.Workbook();
                    var worksheet = workbook.addWorksheet('Employees');

                    DevExpress.excelExporter.exportDataGrid({
                        component: e.component,
                        worksheet: worksheet,
                        autoFilterEnabled: true
                    }).then(function () {
                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Employees.xlsx');
                        });
                    });
                    e.cancel = true;
                },
            });
        }

        let callPopupImport = () => {

        }
    </script>
}