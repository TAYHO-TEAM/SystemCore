
@{
    ViewBag.Title = "Danh mục nhóm công việc";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-12">
        <div id="container" class="elevation-2"></div>
    </div>
</div>

@section script{
    <script>
        const ACTION_NHOMPHAT = "/NS_Phat_Nhom"; 
        var customStore = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred();
                let params = {};
                params['PageSize'] = isNullOrEmpty(values.take) ? values.take : 0;
                params['PageNumber'] = (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0;
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }
                $.ajax({
                    headers: header, dataType: "json",
                    data: params,
                    url: URL_API_PM_READ + ACTION_NHOMPHAT,
                    success: function (data) {
                        deferred.resolve(
                            data.result.items,
                            {
                                totalCount: data.result.pagingInfo.totalItems
                            }
                        );
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách 'Hạng mục'. Mở Console để xem chi tiết.");
                    },
                    timeout: 10000
                });
                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_NHOMPHAT, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_NHOMPHAT, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_NHOMPHAT, key),
        });
        $(function () {
            loadData();
        });

        let loadData = () => $("#container").dxDataGrid({
            height: heightScreen,
            dataSource: customStore,
            remoteOperations: {
                paging: true,
                sorting: true,
            },
            showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
            showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: false,
            onToolbarPreparing: (e) => {
                var container = e.component;
                e.toolbarOptions.items.unshift( 
                    {
                        location: "after", widget: "dxButton",
                        options: {
                            visible: PermitInAction["insert"],
                            text: "Nhóm", icon: "add", stylingMode: "filled", type: "default",
                            onClick: () => container.addRow()
                        }
                    },
                    {
                        location: "after", widget: "dxButton",
                        options: {
                            icon: "refresh", tylingMode: "filled", type: "default",
                            onClick: () => container.refresh()
                        }
                    }
                )
            },
            searchPanel: {
                highlightCaseSensitive: true, highlightSearchText: true,
                visible: true, searchVisibleColumnsOnly: true                
            },
            paging: {
                enabled: true,
                pageSize: 20
            },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [10, 20, 40],
                showInfo: true,
            },
            columns: [
                {
                    dataField: "status", caption: "STT", alignment: "center", width: 80,
                    sortOrder: "desc", allowEditing: false,
                },
                {
                    dataField: "tenNhomPhat", caption: "Tên nhóm", dataType: "string", cssClass:"font-weight-bold",
                    validationRules: [{ type: "required" }],
                    editorType: "dxTextBox",
                    editorOptions: {
                        showClearButton: true,
                        placeholder: "Vui lòng nhập..."
                    }
                },
                {
                    dataField: "dienGiai", caption: "Diễn giải", dataType: "string",
                    cellTemplate: (c, o) => {
                        c.append(isNullOrEmpty(o.value) ? o.value : "--" )
                    },
                    editorOptions: {
                        showClearButton: true, placeholder: "Vui lòng nhập(nếu có)..."
                    }
                },
                {
                    caption: "Tương tác",
                    alignment: "center", width: 100,
                    cellTemplate: (c, o) => {
                        if (o.data.createBy_Name != null) {
                            $("<div />").attr('id', "popover-target-" + o.key).append(
                                $("<img />").attr("src", "data:image/png;base64," + o.data.createBy_Avartar).addClass("img-circle elevation-2 img-size-30"),
                                (o.data.modifyBy_Name != null && o.data.modifyBy_Name != o.data.createBy_Name) ? $("<img />").attr("src", "data:image/png;base64," + o.data.modifyBy_Avartar).addClass("img-circle elevation-2 img-size-30").attr("style", "margin-left: -15px !important") : null
                            ).appendTo(c);
                            $("<div />").attr('id', "popover-detail-" + o.key).append(
                                "<div><b>" + o.data.createBy_Name + "</b></div><em>" + o.data.createBy_Title + ' - ' + o.data.createBy_Department + "</em><div>" + "(Đã tạo cách đây " + moment(o.data.createDate).locale("vi").fromNow() + ")" + "</div>",
                                (o.data.modifyBy_Name != null) ? "<br/><div><b>" + o.data.modifyBy_Name + "</b></div><em>" + o.data.modifyBy_Title + ' - ' + o.data.modifyBy_Department + "</em><div>" + "(Đã cập nhật cách đây " + moment(o.data.updateDate).locale("vi").fromNow() + ")" + "</div>" : null
                            ).appendTo(c);
                            $("#popover-detail-" + o.key).dxPopover({
                                target: "#popover-target-" + o.key,
                                showEvent: "mouseenter", hideEvent: "mouseleave",
                                position: "bottom",
                                animation: {
                                    show: { type: "pop", from: { scale: 0 }, to: { scale: 1 } },
                                    hide: { type: "fade", from: 1, to: 0 }
                                }
                            });
                        }
                    }
                }, 
                {
                    dataField: "isActive", width: 100,
                    editorType: "dxSwitch",
                },
                {
                    dataField: "isVisible", width: 100,
                    editorType: "dxSwitch",
                }, 
            ], 
            editing: {
                allowUpdating: PermitInAction["update"] ? true : null,
                allowDeleting: PermitInAction["delete"] ? true : null,
                mode: "cell", useIcons: false, confirmDelete: true,
            },
            onInitNewRow: (e) => {
                e.data.isActive = true;
                e.data.isVisible = true; 
            },
            rowDragging: {
                allowReordering: PermitInAction["update"],
                showDragIcons: true,
                dropFeedbackMode: "push",
                dragDirection: "vertical",
                onDragEnd: function (e) {
                    var source = e.itemData,
                        target = e.component.getVisibleRows()[e.toIndex].data,
                        d = $.Deferred(); 
                    DevExpress.ui.dialog.confirm("Bạn có chắc là muốn cập nhật danh sách theo thứ tự này?", "XÁC NHẬN THÔNG TIN").done(function (dialogResult) {
                        if (dialogResult) {
                            if (source.id != target.id) {
                                customStore.update(source.id, { status: target.status }).then(() => {
                                    e.component.refresh().then(d.resolve, d.reject);
                                }, d.reject);
                            }
                        }
                    });
                },
            },
        });
    </script>
}