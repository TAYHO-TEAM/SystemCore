
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section style{   }

<div class="row">
    <div class="col-12">
        <div id="container" class="elevation-2"></div>
    </div>
</div>

@section script{
    <script src="~/Scripts/page/ngansach.js"></script>
    <script> 
        var capDoList = [
            { value: "HM", text: "Hạng mục" },
            { value: "NCV", text: "Nhóm công việc" },
            { value: "CV", text: "Công việc" }]

        var customStore = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred();
                var params = {
                    'FindId': 'projectId,' + PROJECTID,
                    'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                    'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                };
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }

                $.ajax({
                    headers: header,
                    url: URL_API_PM_READ + ACTION_GIAIDOAN,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        deferred.resolve(data.result.items, { totalCount: data.result.pagingInfo.totalItems });
                    },
                    error: function (xhr) {
                        console.log(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
                        deferred.reject("Đã có lỗi xảy ra trong quá trình này. Mở Console để xem chi tiết hoặc liên hệ Quản trị viên.");
                    },
                });
                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_GIAIDOAN, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_GIAIDOAN, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_GIAIDOAN, key),
        });
        var customStore_Groups = new DevExpress.data.CustomStore({
            key: "id", loadMode: "raw",
            load: (values) => {
                var deferred = $.Deferred();
                $.ajax({
                    headers: header, dataType: "json",
                    url: URL_API_ACC_READ + ACTION_GROUP,
                    success: function (data) {
                        var list = data.result.items.filter(x => x.isActive == true && x.isVisible == true);
                        deferred.resolve(list);
                    },
                    error: function (xhr) {
                        console.log(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
                        deferred.reject("Đã có lỗi xảy ra trong quá trình này. Mở Console để xem chi tiết hoặc liên hệ Quản trị viên.");
                    },
                });
                return deferred.promise();
            },
        }); 

        $(function () {
            loadData(customStore);
        });
        var loadData = (dataSource) => {
            $("#container").dxDataGrid({
                height: heightScreen,
                dataSource: dataSource,
                remoteOperations: {
                    paging: true,
                    sorting: true,
                    filtering: true,
                },
                showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
                showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: true,
                columns: [
                    {
                        caption: "STT", dataField: "status", sortOrder: "desc",
                        dataType: "number", width: 100, alignment: "center",
                        cellTemplate: (c, o) => c.append(o.rowIndex + 1)
                    },
                    {
                        dataField: "tenGiaiDoan", caption: "Tên giai đoạn",
                        dataType: "string", cssClass: "font-weight-bold",
                        editorOptions: {
                            placeholder: "Vui lòng nhập...",
                            showClearButton: true
                        },
                        validationRules: [{ type: "required" }]
                    },
                    {
                        dataField: "dienGiai", caption: "Diễn giải",
                        dataType: "string",
                        editorOptions: {
                            placeholder: "Vui lòng nhập(nếu có)...",
                            showClearButton: true
                        },
                    },
                    {
                        dataField: "capDo", caption: "Cấp tương tác", dataType: "string",
                        editorType: "dxSelectBox",
                        lookup: {
                            dataSource: capDoList,
                            valueExpr: "value", displayExpr: "text",
                        },
                        editorOptions: {
                            dataSource: capDoList,
                            valueExpr: "value", displayExpr: "text",
                            placeholder: "Vui lòng chọn...",
                        },
                        validationRules: [{ type: "required" }]
                    },
                    {
                        dataField: "groupId", caption: "Nhóm nhập liệu",
                        lookup: {
                            dataSource: customStore_Groups,
                            valueExpr: "id", displayExpr: "title",
                        },
                        editorType: "dxSelectBox",
                        editorOptions: {
                            dataSource: customStore_Groups,
                            valueExpr: "id", displayExpr: "title",
                            placeholder: "Vui lòng chọn...",
                        },
                        validationRules: [{ type: "required" }]
                    },
                    {
                        dataField: "isActive", caption: "Tình trạng",
                        width: 130, alignment: "center",
                        lookup: {
                            dataSource: listActiveStatus,
                            valueExpr: "value", displayExpr: "text",
                        },
                        editorType: "dxSwitch",
                        cellTemplate: (c, o) => {
                            $("<span />").addClass("badge badge-" + listActiveStatus.find(x => x.value == o.value).color).append(
                                $("<i />").addClass("mr-1 " + listActiveStatus.find(x => x.value == o.value).icon), o.text
                            ).appendTo(c);
                        }
                    },
                    {
                        dataField: "isVisible", width: 100,
                        editorType: "dxSwitch", visible: false
                    },
                ],
                paging: {
                    enabled: true,
                    pageSize: 20
                },
                pager: {
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 40],
                    showInfo: true,
                },
                searchPanel: {
                    highlightCaseSensitive: true,
                    highlightSearchText: true,
                    searchVisibleColumnsOnly: true,
                    visible: true
                },
                editing: {
                    allowAdding: PermitInAction.insert,
                    allowUpdating: PermitInAction.update,
                    allowDeleting: PermitInAction.delete,
                    mode: "cell", useIcons: false, confirmDelete: true,
                },
                onToolbarPreparing: function (e) {
                    var container = e.component;
                    e.toolbarOptions.items.unshift(
                        {
                            location: "before", widget: "dxSelectBox",
                            options: {
                                dataSource: customStore_Projects,
                                valueExpr: "id", displayExpr: (item) => { return item && item.title + ' - ' + item.code },
                                searchEnabled: true, searchMode: "contains",
                                placeholder: "Vui lòng chọn...",
                                itemTemplate: (data, index) => {
                                    return $("<div>").html("<b>" + data.title + "</b> - " + data.code + ' - <em>' + data.descriptions + "</em>");
                                },
                                value: PROJECTID, 
                                onValueChanged: function (data) {
                                    PROJECTID = data.value;
                                    localStorage.setItem('projectIdCurrent', PROJECTID);
                                    loadData(customStore);
                                },
                            },
                        }, 
                        {
                            location: "after", widget: "dxButton",
                            options: {
                                icon: "refresh", type: "default",
                                onClick: () => container.refresh()
                            }
                        })
                },
                onInitNewRow: (e) => {
                    e.data.isActive = true;
                    e.data.isVisible = true;
                    e.data.status = 0;
                    e.data.projectId = PROJECTID;
                },
                rowDragging: {
                    allowReordering: PermitInAction["update"],
                    showDragIcons: true,
                    dropFeedbackMode: "push",
                    dragDirection: "vertical",
                    onDragEnd: function (e) {
                        var source = e.itemData,
                            target = e.component.getVisibleRows()[e.toIndex].data,
                            d = $.Deferred();
                        if (source.id != target.id) {
                            customStore.update(source.id, { status: target.status }).then(() => {
                                e.component.refresh().then(d.resolve, d.reject);
                            }, d.reject);
                        }
                    },
                },
            });
        }
    </script>
}