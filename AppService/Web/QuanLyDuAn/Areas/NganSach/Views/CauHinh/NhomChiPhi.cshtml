
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Nhóm chi phí";
}

@section style{   }

<div class="row">
    <div class="col-12">
        <div id="container" class="elevation-2"></div>
    </div>
</div>

@section script{
    <script src="~/Scripts/page/ngansach.js"></script>
    <script>
        var customStore = new DevExpress.data.CustomStore({
            key: "id",
            load: (values) => {
                let deferred = $.Deferred(), params = {};

                params = {
                    'PageSize': isNullOrEmpty(values.take) ? values.take : 0,
                    'PageNumber': (isNullOrEmpty(values.take) && isNullOrEmpty(values.skip)) ? ((values.skip / values.take) + 1) : 0,
                };
                if (values.sort) {
                    params['SortCol'] = values.sort[0].selector;
                    params['SortADSC'] = values.sort[0].desc;
                }

                $.ajax({
                    headers: header,
                    url: URL_API_PM_READ + ACTION_NHOMCHIPHI,
                    dataType: "json",
                    data: params,
                    success: function (data) {
                        deferred.resolve(
                            data.result.items,
                            {
                                totalCount: data.result.pagingInfo.totalItems,
                            }
                        );
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log(xhr.responseJSON);
                        deferred.reject("Có lỗi xảy ra trong quá trình lấy danh sách. Mở Console để xem chi tiết.");
                    },
                    timeout: 5000
                });
                return deferred.promise();
            },
            insert: (values) => ajax_insert(URL_API_PM_CMD + ACTION_NHOMCHIPHI, values),
            update: (key, values) => ajax_update(URL_API_PM_CMD + ACTION_NHOMCHIPHI, key, values),
            remove: (key) => ajax_delete(URL_API_PM_CMD + ACTION_NHOMCHIPHI, key),
        });

        $(function () {
            loadData(customStore);
        });

        let loadData = (dataSource) => $("#container").dxDataGrid({
            height: heightScreen,
            dataSource: dataSource,
            remoteOperations: {
                paging: true,
                sorting: true,
            },
            showBorders: false, showColumnHeaders: true, showColumnLines: false, hoverStateEnabled: true,
            showRowLines: true, columnAutoWidth: true, wordWrapEnabled: true, rowAlternationEnabled: true,
            columns: [
                {
                    dataField: "status", caption: "STT",
                    dataType: "number", width: 100, alignment: "center",
                    editorType: "dxNumberBox",
                    editorOptions: {
                        min: 1, step: 1, showSpinButtons: true,
                    }, sortOrder: "desc",
                    cellTemplate: (c, o) => c.append(o.rowIndex + 1)
                },
                {
                    dataField: "tenNhomChiPhi", caption: "Tên nhóm",
                    dataType: "string", cssClass: "font-weight-bold",
                    editorOptions: {
                        placeholder: "Nhập tên giai đoạn...",
                        showClearButton: true
                    },
                    validationRules: [
                        {
                            type: "required",
                            message: "Bắt buộc nhập thông tin"
                        }
                    ]
                },
                {
                    dataField: "dienGiai", caption: "Diễn giải", dataType: "string",
                    editorOptions: {
                        placeholder: "Nhập nội dung diễn giải...",
                        showClearButton: true
                    },
                },
                {
                    dataField: "isActive", caption: "Tình trạng",
                    width: 130, alignment: "center",
                    //editorType: "dxSwitch",
                    lookup: {
                        dataSource: listActiveStatus,
                        valueExpr: "value", displayExpr: "text",
                    },
                    cellTemplate: (c, o) => $("<span />").addClass("badge badge-" + listActiveStatus.find(x => x.value == o.value).color).append($("<i />").addClass("mr-1 " + listActiveStatus.find(x => x.value == o.value).icon), o.text).appendTo(c)
                }, 
            ],
            paging: { enabled: true, pageSize: 20 },
            pager: {
                showPageSizeSelector: true,
                allowedPageSizes: [10, 20, 40],
                showInfo: true,
            },
            searchPanel: {
                highlightCaseSensitive: true,
                highlightSearchText: true,
                searchVisibleColumnsOnly: true,
                visible: true
            },
            editing: {
                allowAdding: PermitInAction["insert"] ? true : null,
                allowUpdating: PermitInAction["update"] ? true : null,
                allowDeleting: PermitInAction["delete"] ? true : null,
                mode: "cell", useIcons: false, confirmDelete: true,                
            },
            onToolbarPreparing: function (e) {
                var container = e.component;
                e.toolbarOptions.items.unshift( 
                    {
                        location: "after", widget: "dxButton",
                        options: {
                            icon: "refresh", tylingMode: "filled", type: "default",
                            onClick: () => container.refresh()
                        }
                    })
            },
            onInitNewRow: (e) => {
                e.data.isActive = true;
                e.data.isVisible = true;
            },
            rowDragging: {
                allowReordering: PermitInAction["update"],
                showDragIcons: true,
                dropFeedbackMode: "push",
                dragDirection: "vertical",
                onDragEnd: function (e) {
                    var source = e.itemData;
                    var target = e.component.getVisibleRows()[e.toIndex].data;
                    if (source.id != target.id) {
                        console.log(ajax_update(URL_API_PM_CMD + ACTION, source.id, { status: target.status }));
                        e.component.refresh();
                    }
                },
            },
        });
    </script>
}