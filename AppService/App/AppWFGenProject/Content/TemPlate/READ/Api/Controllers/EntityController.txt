using {common};
using {nameproject}.Api.Controllers.{version}.BaseClasses;
using {nameproject}.Api.ViewModels;
using {nameproject}.Api.ViewModels.BaseClasses;
using {nameproject}.Sql.DTOs;
using {nameproject}.Sql.Interfaces;
using {nameproject}.Sql.Parameters;
using AutoMapper;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Services.Common.DomainObjects;
using Services.Common.Paging;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;

namespace {nameproject}.Api.Controllers.{version}
{

    public class {Entity}Controller : APIControllerBase
    {
        private readonly IDOBaseRepository<{Entity}DTO> _dOBaseRepository;

        public {Entity}Controller(IMapper mapper, IHttpContextAccessor httpContextAccessor, IDOBaseRepository<{Entity}DTO> dOBaseRepository) : base(mapper,httpContextAccessor)
        {
            _dOBaseRepository = dOBaseRepository;
        }

        /// <summary>
        /// Get List of {Entity}.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        [HttpGet]
        [ProducesResponseType(typeof(MethodResult<PagingItems<{Entity}ResponseViewModel>>), (int)HttpStatusCode.OK)]
        [ProducesResponseType(typeof(VoidMethodResult), (int)HttpStatusCode.BadRequest)]
        public async Task<IActionResult> Get{Entity}Async([FromQuery] BaseRequestViewModel request)
        {
            var methodResult = new MethodResult<PagingItems<{Entity}ResponseViewModel>>();
            RequestBaseFilterParam requestFilter = _mapper.Map<RequestBaseFilterParam>(request);
            requestFilter.TableName = QuanLyDuAnConstants.{Entity}_TABLENAME;
            var queryResult = await _dOBaseRepository.GetWithPaggingAsync(requestFilter).ConfigureAwait(false);
            methodResult.Result = new PagingItems<{Entity}ResponseViewModel>
            {
                PagingInfo = queryResult.PagingInfo,
                Items = _mapper.Map<IEnumerable<{Entity}ResponseViewModel>>(queryResult.Items)
            };
            return Ok(methodResult);
        }
    }
}

