using .Domain.DomainObjects.BaseClasses;
using Services.Common.DomainObjects.Exceptions;
using System.ComponentModel.DataAnnotations;


namespace .Domain.DomainObjects
{
    public class Accounts : DOBase
    {
        #region Fields
        private string _code;
private byte? _type;
private string _accountName;
private string _passwordHash;
private string _salt;
private string _tokenKey;
private DateTime? _expiryTimeUTC;
private DateTime? _expiryTime;
private string _refreshToken;
private int? _userId;

        #endregion Fields
        #region Constructors

        private Accounts()
        {
        }

        public Accounts(string Code,byte? Type,string AccountName,string PasswordHash,string Salt,string TokenKey,DateTime? ExpiryTimeUTC,DateTime? ExpiryTime,string RefreshToken,int? UserId,) : this()
        {
            _code = Code;
 _type = Type;
 _accountName = AccountName;
 _passwordHash = PasswordHash;
 _salt = Salt;
 _tokenKey = TokenKey;
 _expiryTimeUTC = ExpiryTimeUTC;
 _expiryTime = ExpiryTime;
 _refreshToken = RefreshToken;
 _userId = UserId;

        }
        #endregion Constructors
        #region Properties
        

        #region Behaviours
        [MaxLength(32, ErrorMessage = nameof(ErrorCodeInsert.IErr32))]  public string Code { get=> _code;}
 public byte? Type { get=> _type;}
[MaxLength(128, ErrorMessage = nameof(ErrorCodeInsert.IErr128))]  [Required(ErrorMessage = nameof(ErrorCodeInsert.IErr000))]  public string AccountName { get=> _accountName;}
[MaxLength(128, ErrorMessage = nameof(ErrorCodeInsert.IErr128))]  [Required(ErrorMessage = nameof(ErrorCodeInsert.IErr000))]  public string PasswordHash { get=> _passwordHash;}
[MaxLength(512, ErrorMessage = nameof(ErrorCodeInsert.IErr512))]  public string Salt { get=> _salt;}
[MaxLength(128, ErrorMessage = nameof(ErrorCodeInsert.IErr128))]  public string TokenKey { get=> _tokenKey;}
 public DateTime? ExpiryTimeUTC { get=> _expiryTimeUTC;}
 public DateTime? ExpiryTime { get=> _expiryTime;}
[MaxLength(256, ErrorMessage = nameof(ErrorCodeInsert.IErr256))]  public string RefreshToken { get=> _refreshToken;}
 public int? UserId { get=> _userId;}

       
        public sealed override bool IsValid()
        {
            return base.IsValid();
        }
        #endregion Behaviours
    }
}
